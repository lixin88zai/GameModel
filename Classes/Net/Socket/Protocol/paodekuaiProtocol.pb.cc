// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: paodekuaiProtocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "paodekuaiProtocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* REQHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQHold_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKIsTimeout_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKIsTimeout_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKHold_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQUserLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQUserLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKUserLogin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKUserLogin_reflection_ = NULL;
const ::google::protobuf::Descriptor* SystemHorn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SystemHorn_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFUseHorn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFUseHorn_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQMatchTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQMatchTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKMatchTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKMatchTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQPrivyJoinGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQPrivyJoinGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKPrivyJoinGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKPrivyJoinGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQLeaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQLeaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKLeaveGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKLeaveGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQRejoinGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQRejoinGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKRejoinGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKRejoinGame_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQPrivySitDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQPrivySitDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKPrivySitDown_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKPrivySitDown_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACKReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACKReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableEventItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableEventItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableInfoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableInfoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFTableEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFTableEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerGameInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerGameInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFGameInit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFGameInit_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFDealCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFDealCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQDealEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQDealEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFToken_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFToken_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQPlayCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQPlayCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFPlayCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFPlayCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFPassCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFPassCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFResetCards_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFResetCards_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* BombResultItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BombResultItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFBombResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFBombResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* FinalResultItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FinalResultItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFFinalResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFFinalResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFGameSchedule_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFGameSchedule_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoardInfoItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoardInfoItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFBoardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFBoardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFPropInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFPropInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* REQChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  REQChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* NTFChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NTFChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MutiPlayerData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MutiPlayerData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PdkTypeData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PdkTypeData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_paodekuaiProtocol_2eproto() {
  protobuf_AddDesc_paodekuaiProtocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "paodekuaiProtocol.proto");
  GOOGLE_CHECK(file != NULL);
  REQHold_descriptor_ = file->message_type(0);
  static const int REQHold_offsets_[1] = {
  };
  REQHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQHold_descriptor_,
      REQHold::default_instance_,
      REQHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQHold));
  ACKIsTimeout_descriptor_ = file->message_type(1);
  static const int ACKIsTimeout_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKIsTimeout, result_id_),
  };
  ACKIsTimeout_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKIsTimeout_descriptor_,
      ACKIsTimeout::default_instance_,
      ACKIsTimeout_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKIsTimeout, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKIsTimeout, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKIsTimeout));
  ACKHold_descriptor_ = file->message_type(2);
  static const int ACKHold_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, result_id_),
  };
  ACKHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKHold_descriptor_,
      ACKHold::default_instance_,
      ACKHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKHold));
  REQUserLogin_descriptor_ = file->message_type(3);
  static const int REQUserLogin_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserLogin, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserLogin, session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserLogin, client_version_),
  };
  REQUserLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQUserLogin_descriptor_,
      REQUserLogin::default_instance_,
      REQUserLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQUserLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQUserLogin));
  ACKUserLogin_descriptor_ = file->message_type(4);
  static const int ACKUserLogin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserLogin, result_id_),
  };
  ACKUserLogin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKUserLogin_descriptor_,
      ACKUserLogin::default_instance_,
      ACKUserLogin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserLogin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKUserLogin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKUserLogin));
  SystemHorn_descriptor_ = file->message_type(5);
  static const int SystemHorn_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemHorn, content_),
  };
  SystemHorn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SystemHorn_descriptor_,
      SystemHorn::default_instance_,
      SystemHorn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemHorn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SystemHorn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SystemHorn));
  NTFUseHorn_descriptor_ = file->message_type(6);
  static const int NTFUseHorn_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFUseHorn, horn_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFUseHorn, horn_content_),
  };
  NTFUseHorn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFUseHorn_descriptor_,
      NTFUseHorn::default_instance_,
      NTFUseHorn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFUseHorn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFUseHorn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFUseHorn));
  REQMatchTable_descriptor_ = file->message_type(7);
  static const int REQMatchTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQMatchTable, roomid_),
  };
  REQMatchTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQMatchTable_descriptor_,
      REQMatchTable::default_instance_,
      REQMatchTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQMatchTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQMatchTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQMatchTable));
  ACKMatchTable_descriptor_ = file->message_type(8);
  static const int ACKMatchTable_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKMatchTable, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKMatchTable, roomid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKMatchTable, tableid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKMatchTable, seatid_),
  };
  ACKMatchTable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKMatchTable_descriptor_,
      ACKMatchTable::default_instance_,
      ACKMatchTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKMatchTable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKMatchTable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKMatchTable));
  REQPrivyJoinGame_descriptor_ = file->message_type(9);
  static const int REQPrivyJoinGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPrivyJoinGame, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPrivyJoinGame, session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPrivyJoinGame, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPrivyJoinGame, table_id_),
  };
  REQPrivyJoinGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQPrivyJoinGame_descriptor_,
      REQPrivyJoinGame::default_instance_,
      REQPrivyJoinGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPrivyJoinGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPrivyJoinGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQPrivyJoinGame));
  ACKPrivyJoinGame_descriptor_ = file->message_type(10);
  static const int ACKPrivyJoinGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKPrivyJoinGame, result_id_),
  };
  ACKPrivyJoinGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKPrivyJoinGame_descriptor_,
      ACKPrivyJoinGame::default_instance_,
      ACKPrivyJoinGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKPrivyJoinGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKPrivyJoinGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKPrivyJoinGame));
  REQLeaveGame_descriptor_ = file->message_type(11);
  static const int REQLeaveGame_offsets_[1] = {
  };
  REQLeaveGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQLeaveGame_descriptor_,
      REQLeaveGame::default_instance_,
      REQLeaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLeaveGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQLeaveGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQLeaveGame));
  ACKLeaveGame_descriptor_ = file->message_type(12);
  static const int ACKLeaveGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLeaveGame, result_id_),
  };
  ACKLeaveGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKLeaveGame_descriptor_,
      ACKLeaveGame::default_instance_,
      ACKLeaveGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLeaveGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKLeaveGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKLeaveGame));
  REQRejoinGame_descriptor_ = file->message_type(13);
  static const int REQRejoinGame_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRejoinGame, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRejoinGame, session_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRejoinGame, client_version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRejoinGame, table_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRejoinGame, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRejoinGame, seq_id_),
  };
  REQRejoinGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQRejoinGame_descriptor_,
      REQRejoinGame::default_instance_,
      REQRejoinGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRejoinGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQRejoinGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQRejoinGame));
  ACKRejoinGame_descriptor_ = file->message_type(14);
  static const int ACKRejoinGame_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRejoinGame, result_id_),
  };
  ACKRejoinGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKRejoinGame_descriptor_,
      ACKRejoinGame::default_instance_,
      ACKRejoinGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRejoinGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKRejoinGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKRejoinGame));
  REQPrivySitDown_descriptor_ = file->message_type(15);
  static const int REQPrivySitDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPrivySitDown, seat_id_),
  };
  REQPrivySitDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQPrivySitDown_descriptor_,
      REQPrivySitDown::default_instance_,
      REQPrivySitDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPrivySitDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPrivySitDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQPrivySitDown));
  ACKPrivySitDown_descriptor_ = file->message_type(16);
  static const int ACKPrivySitDown_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKPrivySitDown, result_id_),
  };
  ACKPrivySitDown_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKPrivySitDown_descriptor_,
      ACKPrivySitDown::default_instance_,
      ACKPrivySitDown_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKPrivySitDown, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKPrivySitDown, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKPrivySitDown));
  REQReady_descriptor_ = file->message_type(17);
  static const int REQReady_offsets_[1] = {
  };
  REQReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQReady_descriptor_,
      REQReady::default_instance_,
      REQReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQReady));
  ACKReady_descriptor_ = file->message_type(18);
  static const int ACKReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKReady, result_id_),
  };
  ACKReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACKReady_descriptor_,
      ACKReady::default_instance_,
      ACKReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACKReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACKReady));
  TableEventItem_descriptor_ = file->message_type(19);
  static const int TableEventItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEventItem, event_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEventItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEventItem, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEventItem, kick_reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEventItem, kicked_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEventItem, pb_buffer_),
  };
  TableEventItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableEventItem_descriptor_,
      TableEventItem::default_instance_,
      TableEventItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEventItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableEventItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableEventItem));
  TableInfoItem_descriptor_ = file->message_type(20);
  static const int TableInfoItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoItem, seat_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoItem, identity_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoItem, state_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoItem, state_line_),
  };
  TableInfoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableInfoItem_descriptor_,
      TableInfoItem::default_instance_,
      TableInfoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableInfoItem));
  TableInfo_descriptor_ = file->message_type(21);
  static const int TableInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfo, info_list_),
  };
  TableInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TableInfo_descriptor_,
      TableInfo::default_instance_,
      TableInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TableInfo));
  UserInfo_descriptor_ = file->message_type(22);
  static const int UserInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, face_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, nick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, loginip_),
  };
  UserInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UserInfo_descriptor_,
      UserInfo::default_instance_,
      UserInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UserInfo));
  NTFTableEvent_descriptor_ = file->message_type(23);
  static const int NTFTableEvent_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFTableEvent, event_list_),
  };
  NTFTableEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFTableEvent_descriptor_,
      NTFTableEvent::default_instance_,
      NTFTableEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFTableEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFTableEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFTableEvent));
  PlayerGameInfo_descriptor_ = file->message_type(24);
  static const int PlayerGameInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGameInfo, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGameInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGameInfo, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGameInfo, loses_),
  };
  PlayerGameInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerGameInfo_descriptor_,
      PlayerGameInfo::default_instance_,
      PlayerGameInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGameInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerGameInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerGameInfo));
  NTFGameInit_descriptor_ = file->message_type(25);
  static const int NTFGameInit_offsets_[1] = {
  };
  NTFGameInit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFGameInit_descriptor_,
      NTFGameInit::default_instance_,
      NTFGameInit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFGameInit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFGameInit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFGameInit));
  NTFDealCards_descriptor_ = file->message_type(26);
  static const int NTFDealCards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFDealCards, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFDealCards, fst_user_),
  };
  NTFDealCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFDealCards_descriptor_,
      NTFDealCards::default_instance_,
      NTFDealCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFDealCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFDealCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFDealCards));
  REQDealEnd_descriptor_ = file->message_type(27);
  static const int REQDealEnd_offsets_[1] = {
  };
  REQDealEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQDealEnd_descriptor_,
      REQDealEnd::default_instance_,
      REQDealEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQDealEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQDealEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQDealEnd));
  NTFToken_descriptor_ = file->message_type(28);
  static const int NTFToken_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFToken, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFToken, token_type_),
  };
  NTFToken_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFToken_descriptor_,
      NTFToken::default_instance_,
      NTFToken_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFToken, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFToken, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFToken));
  REQPlayCards_descriptor_ = file->message_type(29);
  static const int REQPlayCards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPlayCards, card_id_),
  };
  REQPlayCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQPlayCards_descriptor_,
      REQPlayCards::default_instance_,
      REQPlayCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPlayCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQPlayCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQPlayCards));
  NTFPlayCards_descriptor_ = file->message_type(30);
  static const int NTFPlayCards_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFPlayCards, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFPlayCards, card_id_),
  };
  NTFPlayCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFPlayCards_descriptor_,
      NTFPlayCards::default_instance_,
      NTFPlayCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFPlayCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFPlayCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFPlayCards));
  NTFPassCards_descriptor_ = file->message_type(31);
  static const int NTFPassCards_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFPassCards, user_id_),
  };
  NTFPassCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFPassCards_descriptor_,
      NTFPassCards::default_instance_,
      NTFPassCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFPassCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFPassCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFPassCards));
  NTFResetCards_descriptor_ = file->message_type(32);
  static const int NTFResetCards_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFResetCards, code_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFResetCards, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFResetCards, played_id_),
  };
  NTFResetCards_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFResetCards_descriptor_,
      NTFResetCards::default_instance_,
      NTFResetCards_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFResetCards, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFResetCards, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFResetCards));
  ResultItem_descriptor_ = file->message_type(33);
  static const int ResultItem_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, result_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, totalscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, baopei_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, lastscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, bombscore_),
  };
  ResultItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultItem_descriptor_,
      ResultItem::default_instance_,
      ResultItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultItem));
  NTFResult_descriptor_ = file->message_type(34);
  static const int NTFResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFResult, result_list_),
  };
  NTFResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFResult_descriptor_,
      NTFResult::default_instance_,
      NTFResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFResult));
  BombResultItem_descriptor_ = file->message_type(35);
  static const int BombResultItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BombResultItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BombResultItem, score_chg_),
  };
  BombResultItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BombResultItem_descriptor_,
      BombResultItem::default_instance_,
      BombResultItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BombResultItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BombResultItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BombResultItem));
  NTFBombResult_descriptor_ = file->message_type(36);
  static const int NTFBombResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFBombResult, result_list_),
  };
  NTFBombResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFBombResult_descriptor_,
      NTFBombResult::default_instance_,
      NTFBombResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFBombResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFBombResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFBombResult));
  FinalResultItem_descriptor_ = file->message_type(37);
  static const int FinalResultItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResultItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResultItem, single_max_score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResultItem, bombcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResultItem, wins_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResultItem, loses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResultItem, totalscore_),
  };
  FinalResultItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FinalResultItem_descriptor_,
      FinalResultItem::default_instance_,
      FinalResultItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResultItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FinalResultItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FinalResultItem));
  NTFFinalResult_descriptor_ = file->message_type(38);
  static const int NTFFinalResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFFinalResult, result_list_),
  };
  NTFFinalResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFFinalResult_descriptor_,
      NTFFinalResult::default_instance_,
      NTFFinalResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFFinalResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFFinalResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFFinalResult));
  NTFGameSchedule_descriptor_ = file->message_type(39);
  static const int NTFGameSchedule_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFGameSchedule, count_all_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFGameSchedule, count_idx_),
  };
  NTFGameSchedule_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFGameSchedule_descriptor_,
      NTFGameSchedule::default_instance_,
      NTFGameSchedule_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFGameSchedule, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFGameSchedule, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFGameSchedule));
  BoardInfoItem_descriptor_ = file->message_type(40);
  static const int BoardInfoItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardInfoItem, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardInfoItem, curr_card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardInfoItem, left_card_num_),
  };
  BoardInfoItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoardInfoItem_descriptor_,
      BoardInfoItem::default_instance_,
      BoardInfoItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardInfoItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoardInfoItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoardInfoItem));
  NTFBoardInfo_descriptor_ = file->message_type(41);
  static const int NTFBoardInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFBoardInfo, info_item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFBoardInfo, curr_token_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFBoardInfo, curr_token_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFBoardInfo, remain_card_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFBoardInfo, first_user_id_),
  };
  NTFBoardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFBoardInfo_descriptor_,
      NTFBoardInfo::default_instance_,
      NTFBoardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFBoardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFBoardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFBoardInfo));
  NTFPropInfo_descriptor_ = file->message_type(42);
  static const int NTFPropInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFPropInfo, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFPropInfo, chg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFPropInfo, left_),
  };
  NTFPropInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFPropInfo_descriptor_,
      NTFPropInfo::default_instance_,
      NTFPropInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFPropInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFPropInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFPropInfo));
  REQChat_descriptor_ = file->message_type(43);
  static const int REQChat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChat, to_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChat, chat_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChat, chat_msg_),
  };
  REQChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      REQChat_descriptor_,
      REQChat::default_instance_,
      REQChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(REQChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(REQChat));
  NTFChat_descriptor_ = file->message_type(44);
  static const int NTFChat_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFChat, send_user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFChat, chat_msg_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFChat, chat_msg_),
  };
  NTFChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NTFChat_descriptor_,
      NTFChat::default_instance_,
      NTFChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NTFChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NTFChat));
  PlayerData_descriptor_ = file->message_type(45);
  static const int PlayerData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, player_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, seat_),
  };
  PlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerData_descriptor_,
      PlayerData::default_instance_,
      PlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerData));
  MutiPlayerData_descriptor_ = file->message_type(46);
  static const int MutiPlayerData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutiPlayerData, player_data_),
  };
  MutiPlayerData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MutiPlayerData_descriptor_,
      MutiPlayerData::default_instance_,
      MutiPlayerData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutiPlayerData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MutiPlayerData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MutiPlayerData));
  PdkTypeData_descriptor_ = file->message_type(47);
  static const int PdkTypeData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PdkTypeData, cards_),
  };
  PdkTypeData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PdkTypeData_descriptor_,
      PdkTypeData::default_instance_,
      PdkTypeData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PdkTypeData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PdkTypeData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PdkTypeData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_paodekuaiProtocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQHold_descriptor_, &REQHold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKIsTimeout_descriptor_, &ACKIsTimeout::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKHold_descriptor_, &ACKHold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQUserLogin_descriptor_, &REQUserLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKUserLogin_descriptor_, &ACKUserLogin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SystemHorn_descriptor_, &SystemHorn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFUseHorn_descriptor_, &NTFUseHorn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQMatchTable_descriptor_, &REQMatchTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKMatchTable_descriptor_, &ACKMatchTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQPrivyJoinGame_descriptor_, &REQPrivyJoinGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKPrivyJoinGame_descriptor_, &ACKPrivyJoinGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQLeaveGame_descriptor_, &REQLeaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKLeaveGame_descriptor_, &ACKLeaveGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQRejoinGame_descriptor_, &REQRejoinGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKRejoinGame_descriptor_, &ACKRejoinGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQPrivySitDown_descriptor_, &REQPrivySitDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKPrivySitDown_descriptor_, &ACKPrivySitDown::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQReady_descriptor_, &REQReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACKReady_descriptor_, &ACKReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableEventItem_descriptor_, &TableEventItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableInfoItem_descriptor_, &TableInfoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TableInfo_descriptor_, &TableInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UserInfo_descriptor_, &UserInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFTableEvent_descriptor_, &NTFTableEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerGameInfo_descriptor_, &PlayerGameInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFGameInit_descriptor_, &NTFGameInit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFDealCards_descriptor_, &NTFDealCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQDealEnd_descriptor_, &REQDealEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFToken_descriptor_, &NTFToken::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQPlayCards_descriptor_, &REQPlayCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFPlayCards_descriptor_, &NTFPlayCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFPassCards_descriptor_, &NTFPassCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFResetCards_descriptor_, &NTFResetCards::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultItem_descriptor_, &ResultItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFResult_descriptor_, &NTFResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BombResultItem_descriptor_, &BombResultItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFBombResult_descriptor_, &NTFBombResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FinalResultItem_descriptor_, &FinalResultItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFFinalResult_descriptor_, &NTFFinalResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFGameSchedule_descriptor_, &NTFGameSchedule::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoardInfoItem_descriptor_, &BoardInfoItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFBoardInfo_descriptor_, &NTFBoardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFPropInfo_descriptor_, &NTFPropInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    REQChat_descriptor_, &REQChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NTFChat_descriptor_, &NTFChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerData_descriptor_, &PlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MutiPlayerData_descriptor_, &MutiPlayerData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PdkTypeData_descriptor_, &PdkTypeData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_paodekuaiProtocol_2eproto() {
  delete REQHold::default_instance_;
  delete REQHold_reflection_;
  delete ACKIsTimeout::default_instance_;
  delete ACKIsTimeout_reflection_;
  delete ACKHold::default_instance_;
  delete ACKHold_reflection_;
  delete REQUserLogin::default_instance_;
  delete REQUserLogin_reflection_;
  delete ACKUserLogin::default_instance_;
  delete ACKUserLogin_reflection_;
  delete SystemHorn::default_instance_;
  delete SystemHorn_reflection_;
  delete NTFUseHorn::default_instance_;
  delete NTFUseHorn_reflection_;
  delete REQMatchTable::default_instance_;
  delete REQMatchTable_reflection_;
  delete ACKMatchTable::default_instance_;
  delete ACKMatchTable_reflection_;
  delete REQPrivyJoinGame::default_instance_;
  delete REQPrivyJoinGame_reflection_;
  delete ACKPrivyJoinGame::default_instance_;
  delete ACKPrivyJoinGame_reflection_;
  delete REQLeaveGame::default_instance_;
  delete REQLeaveGame_reflection_;
  delete ACKLeaveGame::default_instance_;
  delete ACKLeaveGame_reflection_;
  delete REQRejoinGame::default_instance_;
  delete REQRejoinGame_reflection_;
  delete ACKRejoinGame::default_instance_;
  delete ACKRejoinGame_reflection_;
  delete REQPrivySitDown::default_instance_;
  delete REQPrivySitDown_reflection_;
  delete ACKPrivySitDown::default_instance_;
  delete ACKPrivySitDown_reflection_;
  delete REQReady::default_instance_;
  delete REQReady_reflection_;
  delete ACKReady::default_instance_;
  delete ACKReady_reflection_;
  delete TableEventItem::default_instance_;
  delete TableEventItem_reflection_;
  delete TableInfoItem::default_instance_;
  delete TableInfoItem_reflection_;
  delete TableInfo::default_instance_;
  delete TableInfo_reflection_;
  delete UserInfo::default_instance_;
  delete UserInfo_reflection_;
  delete NTFTableEvent::default_instance_;
  delete NTFTableEvent_reflection_;
  delete PlayerGameInfo::default_instance_;
  delete PlayerGameInfo_reflection_;
  delete NTFGameInit::default_instance_;
  delete NTFGameInit_reflection_;
  delete NTFDealCards::default_instance_;
  delete NTFDealCards_reflection_;
  delete REQDealEnd::default_instance_;
  delete REQDealEnd_reflection_;
  delete NTFToken::default_instance_;
  delete NTFToken_reflection_;
  delete REQPlayCards::default_instance_;
  delete REQPlayCards_reflection_;
  delete NTFPlayCards::default_instance_;
  delete NTFPlayCards_reflection_;
  delete NTFPassCards::default_instance_;
  delete NTFPassCards_reflection_;
  delete NTFResetCards::default_instance_;
  delete NTFResetCards_reflection_;
  delete ResultItem::default_instance_;
  delete ResultItem_reflection_;
  delete NTFResult::default_instance_;
  delete NTFResult_reflection_;
  delete BombResultItem::default_instance_;
  delete BombResultItem_reflection_;
  delete NTFBombResult::default_instance_;
  delete NTFBombResult_reflection_;
  delete FinalResultItem::default_instance_;
  delete FinalResultItem_reflection_;
  delete NTFFinalResult::default_instance_;
  delete NTFFinalResult_reflection_;
  delete NTFGameSchedule::default_instance_;
  delete NTFGameSchedule_reflection_;
  delete BoardInfoItem::default_instance_;
  delete BoardInfoItem_reflection_;
  delete NTFBoardInfo::default_instance_;
  delete NTFBoardInfo_reflection_;
  delete NTFPropInfo::default_instance_;
  delete NTFPropInfo_reflection_;
  delete REQChat::default_instance_;
  delete REQChat_reflection_;
  delete NTFChat::default_instance_;
  delete NTFChat_reflection_;
  delete PlayerData::default_instance_;
  delete PlayerData_reflection_;
  delete MutiPlayerData::default_instance_;
  delete MutiPlayerData_reflection_;
  delete PdkTypeData::default_instance_;
  delete PdkTypeData_reflection_;
}

void protobuf_AddDesc_paodekuaiProtocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027paodekuaiProtocol.proto\"\t\n\007REQHold\"$\n\014"
    "ACKIsTimeout\022\024\n\tresult_id\030\001 \002(\005:\0010\"\034\n\007AC"
    "KHold\022\021\n\tresult_id\030\001 \001(\005\"L\n\014REQUserLogin"
    "\022\017\n\007user_id\030\001 \002(\003\022\023\n\013session_key\030\002 \002(\014\022\026"
    "\n\016client_version\030\003 \002(\005\"$\n\014ACKUserLogin\022\024"
    "\n\tresult_id\030\001 \002(\005:\0010\"\035\n\nSystemHorn\022\017\n\007co"
    "ntent\030\001 \001(\014\"5\n\nNTFUseHorn\022\021\n\thorn_type\030\001"
    " \001(\005\022\024\n\014horn_content\030\002 \001(\014\"\037\n\rREQMatchTa"
    "ble\022\016\n\006roomid\030\001 \001(\005\"N\n\rACKMatchTable\022\014\n\004"
    "code\030\001 \001(\005\022\016\n\006roomid\030\002 \001(\005\022\017\n\007tableid\030\003 "
    "\001(\005\022\016\n\006seatid\030\004 \001(\005\"b\n\020REQPrivyJoinGame\022"
    "\017\n\007user_id\030\001 \002(\003\022\023\n\013session_key\030\002 \002(\014\022\026\n"
    "\016client_version\030\003 \002(\005\022\020\n\010table_id\030\004 \002(\005\""
    "(\n\020ACKPrivyJoinGame\022\024\n\tresult_id\030\001 \002(\005:\001"
    "0\"\016\n\014REQLeaveGame\"$\n\014ACKLeaveGame\022\024\n\tres"
    "ult_id\030\001 \002(\005:\0010\"\200\001\n\rREQRejoinGame\022\017\n\007use"
    "r_id\030\001 \002(\003\022\023\n\013session_key\030\002 \002(\014\022\026\n\016clien"
    "t_version\030\003 \002(\005\022\020\n\010table_id\030\004 \002(\005\022\017\n\007sea"
    "t_id\030\005 \002(\005\022\016\n\006seq_id\030\006 \002(\005\"%\n\rACKRejoinG"
    "ame\022\024\n\tresult_id\030\001 \002(\005:\0010\"\"\n\017REQPrivySit"
    "Down\022\017\n\007seat_id\030\001 \001(\005\"$\n\017ACKPrivySitDown"
    "\022\021\n\tresult_id\030\001 \001(\005\"\n\n\010REQReady\" \n\010ACKRe"
    "ady\022\024\n\tresult_id\030\001 \002(\005:\0010\"\206\001\n\016TableEvent"
    "Item\022\022\n\nevent_type\030\001 \002(\005\022\017\n\007user_id\030\002 \001("
    "\003\022\017\n\007seat_id\030\003 \001(\005\022\023\n\013kick_reason\030\004 \001(\005\022"
    "\026\n\016kicked_user_id\030\005 \001(\003\022\021\n\tpb_buffer\030\006 \001"
    "(\014\"p\n\rTableInfoItem\022\017\n\007user_id\030\001 \002(\003\022\017\n\007"
    "seat_id\030\002 \002(\005\022\025\n\ridentity_type\030\003 \002(\005\022\022\n\n"
    "state_type\030\004 \002(\005\022\022\n\nstate_line\030\005 \001(\005\".\n\t"
    "TableInfo\022!\n\tinfo_list\030\001 \003(\0132\016.TableInfo"
    "Item\"G\n\010UserInfo\022\016\n\006gender\030\001 \001(\005\022\014\n\004face"
    "\030\002 \001(\014\022\014\n\004nick\030\003 \001(\014\022\017\n\007loginip\030\004 \001(\014\"4\n"
    "\rNTFTableEvent\022#\n\nevent_list\030\001 \003(\0132\017.Tab"
    "leEventItem\"M\n\016PlayerGameInfo\022\017\n\007user_id"
    "\030\001 \001(\003\022\r\n\005score\030\002 \001(\005\022\014\n\004wins\030\003 \001(\005\022\r\n\005l"
    "oses\030\004 \001(\005\"\r\n\013NTFGameInit\"1\n\014NTFDealCard"
    "s\022\017\n\007card_id\030\001 \003(\005\022\020\n\010fst_user\030\002 \001(\003\"\014\n\n"
    "REQDealEnd\"/\n\010NTFToken\022\017\n\007user_id\030\001 \003(\003\022"
    "\022\n\ntoken_type\030\002 \001(\005\"\037\n\014REQPlayCards\022\017\n\007c"
    "ard_id\030\001 \003(\005\"0\n\014NTFPlayCards\022\017\n\007user_id\030"
    "\001 \002(\003\022\017\n\007card_id\030\002 \003(\005\"\037\n\014NTFPassCards\022\017"
    "\n\007user_id\030\001 \002(\003\"D\n\rNTFResetCards\022\017\n\007code"
    "_id\030\001 \002(\005\022\017\n\007card_id\030\002 \003(\005\022\021\n\tplayed_id\030"
    "\003 \003(\005\"\234\001\n\nResultItem\022\017\n\007user_id\030\001 \002(\003\022\023\n"
    "\013result_type\030\002 \001(\005\022\017\n\007card_id\030\003 \003(\005\022\r\n\005s"
    "core\030\004 \001(\005\022\022\n\ntotalscore\030\005 \001(\005\022\016\n\006baopei"
    "\030\006 \001(\005\022\021\n\tlastscore\030\007 \001(\005\022\021\n\tbombscore\030\010"
    " \001(\005\"-\n\tNTFResult\022 \n\013result_list\030\001 \003(\0132\013"
    ".ResultItem\"4\n\016BombResultItem\022\017\n\007user_id"
    "\030\001 \001(\003\022\021\n\tscore_chg\030\002 \001(\005\"5\n\rNTFBombResu"
    "lt\022$\n\013result_list\030\001 \003(\0132\017.BombResultItem"
    "\"~\n\017FinalResultItem\022\017\n\007user_id\030\001 \001(\003\022\030\n\020"
    "single_max_score\030\002 \001(\005\022\017\n\007bombcnt\030\003 \001(\005\022"
    "\014\n\004wins\030\004 \001(\005\022\r\n\005loses\030\005 \001(\005\022\022\n\ntotalsco"
    "re\030\006 \001(\005\"7\n\016NTFFinalResult\022%\n\013result_lis"
    "t\030\001 \003(\0132\020.FinalResultItem\"7\n\017NTFGameSche"
    "dule\022\021\n\tcount_all\030\001 \001(\005\022\021\n\tcount_idx\030\002 \001"
    "(\005\"M\n\rBoardInfoItem\022\017\n\007user_id\030\001 \001(\003\022\024\n\014"
    "curr_card_id\030\002 \003(\005\022\025\n\rleft_card_num\030\003 \001("
    "\005\"\225\001\n\014NTFBoardInfo\022!\n\tinfo_item\030\001 \003(\0132\016."
    "BoardInfoItem\022\027\n\017curr_token_type\030\002 \001(\005\022\032"
    "\n\022curr_token_user_id\030\003 \003(\003\022\026\n\016remain_car"
    "d_id\030\004 \003(\005\022\025\n\rfirst_user_id\030\005 \001(\003\"8\n\013NTF"
    "PropInfo\022\016\n\006propid\030\001 \001(\005\022\013\n\003chg\030\002 \001(\005\022\014\n"
    "\004left\030\003 \001(\005\"D\n\007REQChat\022\022\n\nto_user_id\030\001 \001"
    "(\003\022\023\n\013chat_msg_id\030\002 \001(\005\022\020\n\010chat_msg\030\003 \001("
    "\014\"F\n\007NTFChat\022\024\n\014send_user_id\030\001 \001(\003\022\023\n\013ch"
    "at_msg_id\030\002 \001(\005\022\020\n\010chat_msg\030\003 \001(\014\"-\n\nPla"
    "yerData\022\021\n\tplayer_id\030\001 \001(\003\022\014\n\004seat\030\002 \001(\005"
    "\"2\n\016MutiPlayerData\022 \n\013player_data\030\001 \003(\0132"
    "\013.PlayerData\"\034\n\013PdkTypeData\022\r\n\005cards\030\001 \003"
    "(\005", 2842);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "paodekuaiProtocol.proto", &protobuf_RegisterTypes);
  REQHold::default_instance_ = new REQHold();
  ACKIsTimeout::default_instance_ = new ACKIsTimeout();
  ACKHold::default_instance_ = new ACKHold();
  REQUserLogin::default_instance_ = new REQUserLogin();
  ACKUserLogin::default_instance_ = new ACKUserLogin();
  SystemHorn::default_instance_ = new SystemHorn();
  NTFUseHorn::default_instance_ = new NTFUseHorn();
  REQMatchTable::default_instance_ = new REQMatchTable();
  ACKMatchTable::default_instance_ = new ACKMatchTable();
  REQPrivyJoinGame::default_instance_ = new REQPrivyJoinGame();
  ACKPrivyJoinGame::default_instance_ = new ACKPrivyJoinGame();
  REQLeaveGame::default_instance_ = new REQLeaveGame();
  ACKLeaveGame::default_instance_ = new ACKLeaveGame();
  REQRejoinGame::default_instance_ = new REQRejoinGame();
  ACKRejoinGame::default_instance_ = new ACKRejoinGame();
  REQPrivySitDown::default_instance_ = new REQPrivySitDown();
  ACKPrivySitDown::default_instance_ = new ACKPrivySitDown();
  REQReady::default_instance_ = new REQReady();
  ACKReady::default_instance_ = new ACKReady();
  TableEventItem::default_instance_ = new TableEventItem();
  TableInfoItem::default_instance_ = new TableInfoItem();
  TableInfo::default_instance_ = new TableInfo();
  UserInfo::default_instance_ = new UserInfo();
  NTFTableEvent::default_instance_ = new NTFTableEvent();
  PlayerGameInfo::default_instance_ = new PlayerGameInfo();
  NTFGameInit::default_instance_ = new NTFGameInit();
  NTFDealCards::default_instance_ = new NTFDealCards();
  REQDealEnd::default_instance_ = new REQDealEnd();
  NTFToken::default_instance_ = new NTFToken();
  REQPlayCards::default_instance_ = new REQPlayCards();
  NTFPlayCards::default_instance_ = new NTFPlayCards();
  NTFPassCards::default_instance_ = new NTFPassCards();
  NTFResetCards::default_instance_ = new NTFResetCards();
  ResultItem::default_instance_ = new ResultItem();
  NTFResult::default_instance_ = new NTFResult();
  BombResultItem::default_instance_ = new BombResultItem();
  NTFBombResult::default_instance_ = new NTFBombResult();
  FinalResultItem::default_instance_ = new FinalResultItem();
  NTFFinalResult::default_instance_ = new NTFFinalResult();
  NTFGameSchedule::default_instance_ = new NTFGameSchedule();
  BoardInfoItem::default_instance_ = new BoardInfoItem();
  NTFBoardInfo::default_instance_ = new NTFBoardInfo();
  NTFPropInfo::default_instance_ = new NTFPropInfo();
  REQChat::default_instance_ = new REQChat();
  NTFChat::default_instance_ = new NTFChat();
  PlayerData::default_instance_ = new PlayerData();
  MutiPlayerData::default_instance_ = new MutiPlayerData();
  PdkTypeData::default_instance_ = new PdkTypeData();
  REQHold::default_instance_->InitAsDefaultInstance();
  ACKIsTimeout::default_instance_->InitAsDefaultInstance();
  ACKHold::default_instance_->InitAsDefaultInstance();
  REQUserLogin::default_instance_->InitAsDefaultInstance();
  ACKUserLogin::default_instance_->InitAsDefaultInstance();
  SystemHorn::default_instance_->InitAsDefaultInstance();
  NTFUseHorn::default_instance_->InitAsDefaultInstance();
  REQMatchTable::default_instance_->InitAsDefaultInstance();
  ACKMatchTable::default_instance_->InitAsDefaultInstance();
  REQPrivyJoinGame::default_instance_->InitAsDefaultInstance();
  ACKPrivyJoinGame::default_instance_->InitAsDefaultInstance();
  REQLeaveGame::default_instance_->InitAsDefaultInstance();
  ACKLeaveGame::default_instance_->InitAsDefaultInstance();
  REQRejoinGame::default_instance_->InitAsDefaultInstance();
  ACKRejoinGame::default_instance_->InitAsDefaultInstance();
  REQPrivySitDown::default_instance_->InitAsDefaultInstance();
  ACKPrivySitDown::default_instance_->InitAsDefaultInstance();
  REQReady::default_instance_->InitAsDefaultInstance();
  ACKReady::default_instance_->InitAsDefaultInstance();
  TableEventItem::default_instance_->InitAsDefaultInstance();
  TableInfoItem::default_instance_->InitAsDefaultInstance();
  TableInfo::default_instance_->InitAsDefaultInstance();
  UserInfo::default_instance_->InitAsDefaultInstance();
  NTFTableEvent::default_instance_->InitAsDefaultInstance();
  PlayerGameInfo::default_instance_->InitAsDefaultInstance();
  NTFGameInit::default_instance_->InitAsDefaultInstance();
  NTFDealCards::default_instance_->InitAsDefaultInstance();
  REQDealEnd::default_instance_->InitAsDefaultInstance();
  NTFToken::default_instance_->InitAsDefaultInstance();
  REQPlayCards::default_instance_->InitAsDefaultInstance();
  NTFPlayCards::default_instance_->InitAsDefaultInstance();
  NTFPassCards::default_instance_->InitAsDefaultInstance();
  NTFResetCards::default_instance_->InitAsDefaultInstance();
  ResultItem::default_instance_->InitAsDefaultInstance();
  NTFResult::default_instance_->InitAsDefaultInstance();
  BombResultItem::default_instance_->InitAsDefaultInstance();
  NTFBombResult::default_instance_->InitAsDefaultInstance();
  FinalResultItem::default_instance_->InitAsDefaultInstance();
  NTFFinalResult::default_instance_->InitAsDefaultInstance();
  NTFGameSchedule::default_instance_->InitAsDefaultInstance();
  BoardInfoItem::default_instance_->InitAsDefaultInstance();
  NTFBoardInfo::default_instance_->InitAsDefaultInstance();
  NTFPropInfo::default_instance_->InitAsDefaultInstance();
  REQChat::default_instance_->InitAsDefaultInstance();
  NTFChat::default_instance_->InitAsDefaultInstance();
  PlayerData::default_instance_->InitAsDefaultInstance();
  MutiPlayerData::default_instance_->InitAsDefaultInstance();
  PdkTypeData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_paodekuaiProtocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_paodekuaiProtocol_2eproto {
  StaticDescriptorInitializer_paodekuaiProtocol_2eproto() {
    protobuf_AddDesc_paodekuaiProtocol_2eproto();
  }
} static_descriptor_initializer_paodekuaiProtocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

REQHold::REQHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQHold::InitAsDefaultInstance() {
}

REQHold::REQHold(const REQHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQHold::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQHold::~REQHold() {
  SharedDtor();
}

void REQHold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQHold_descriptor_;
}

const REQHold& REQHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

REQHold* REQHold::default_instance_ = NULL;

REQHold* REQHold::New() const {
  return new REQHold;
}

void REQHold::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void REQHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQHold::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQHold::MergeFrom(const REQHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQHold::CopyFrom(const REQHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQHold::IsInitialized() const {

  return true;
}

void REQHold::Swap(REQHold* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQHold_descriptor_;
  metadata.reflection = REQHold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKIsTimeout::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKIsTimeout::ACKIsTimeout()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKIsTimeout::InitAsDefaultInstance() {
}

ACKIsTimeout::ACKIsTimeout(const ACKIsTimeout& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKIsTimeout::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKIsTimeout::~ACKIsTimeout() {
  SharedDtor();
}

void ACKIsTimeout::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKIsTimeout::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKIsTimeout::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKIsTimeout_descriptor_;
}

const ACKIsTimeout& ACKIsTimeout::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

ACKIsTimeout* ACKIsTimeout::default_instance_ = NULL;

ACKIsTimeout* ACKIsTimeout::New() const {
  return new ACKIsTimeout;
}

void ACKIsTimeout::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKIsTimeout::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKIsTimeout::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKIsTimeout::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKIsTimeout::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_id = 1 [default = 0];
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKIsTimeout::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKIsTimeout* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKIsTimeout*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKIsTimeout::MergeFrom(const ACKIsTimeout& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKIsTimeout::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKIsTimeout::CopyFrom(const ACKIsTimeout& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKIsTimeout::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ACKIsTimeout::Swap(ACKIsTimeout* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKIsTimeout::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKIsTimeout_descriptor_;
  metadata.reflection = ACKIsTimeout_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKHold::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKHold::ACKHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKHold::InitAsDefaultInstance() {
}

ACKHold::ACKHold(const ACKHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKHold::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKHold::~ACKHold() {
  SharedDtor();
}

void ACKHold::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKHold_descriptor_;
}

const ACKHold& ACKHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

ACKHold* ACKHold::default_instance_ = NULL;

ACKHold* ACKHold::New() const {
  return new ACKHold;
}

void ACKHold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result_id = 1;
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result_id = 1;
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKHold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result_id = 1;
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKHold::MergeFrom(const ACKHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKHold::CopyFrom(const ACKHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKHold::IsInitialized() const {

  return true;
}

void ACKHold::Swap(ACKHold* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKHold_descriptor_;
  metadata.reflection = ACKHold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQUserLogin::kUserIdFieldNumber;
const int REQUserLogin::kSessionKeyFieldNumber;
const int REQUserLogin::kClientVersionFieldNumber;
#endif  // !_MSC_VER

REQUserLogin::REQUserLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQUserLogin::InitAsDefaultInstance() {
}

REQUserLogin::REQUserLogin(const REQUserLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQUserLogin::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQUserLogin::~REQUserLogin() {
  SharedDtor();
}

void REQUserLogin::SharedDtor() {
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (this != default_instance_) {
  }
}

void REQUserLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQUserLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQUserLogin_descriptor_;
}

const REQUserLogin& REQUserLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

REQUserLogin* REQUserLogin::default_instance_ = NULL;

REQUserLogin* REQUserLogin::New() const {
  return new REQUserLogin;
}

void REQUserLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::kEmptyString) {
        session_key_->clear();
      }
    }
    client_version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQUserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_key;
        break;
      }

      // required bytes session_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_version;
        break;
      }

      // required int32 client_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQUserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required bytes session_key = 2;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->session_key(), output);
  }

  // required int32 client_version = 3;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_version(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQUserLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // required bytes session_key = 2;
  if (has_session_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->session_key(), target);
  }

  // required int32 client_version = 3;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_version(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQUserLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required bytes session_key = 2;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_key());
    }

    // required int32 client_version = 3;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_version());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQUserLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQUserLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQUserLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQUserLogin::MergeFrom(const REQUserLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQUserLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQUserLogin::CopyFrom(const REQUserLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQUserLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void REQUserLogin::Swap(REQUserLogin* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_key_, other->session_key_);
    std::swap(client_version_, other->client_version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQUserLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQUserLogin_descriptor_;
  metadata.reflection = REQUserLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKUserLogin::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKUserLogin::ACKUserLogin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKUserLogin::InitAsDefaultInstance() {
}

ACKUserLogin::ACKUserLogin(const ACKUserLogin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKUserLogin::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKUserLogin::~ACKUserLogin() {
  SharedDtor();
}

void ACKUserLogin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKUserLogin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKUserLogin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKUserLogin_descriptor_;
}

const ACKUserLogin& ACKUserLogin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

ACKUserLogin* ACKUserLogin::default_instance_ = NULL;

ACKUserLogin* ACKUserLogin::New() const {
  return new ACKUserLogin;
}

void ACKUserLogin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKUserLogin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKUserLogin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKUserLogin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKUserLogin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_id = 1 [default = 0];
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKUserLogin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKUserLogin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKUserLogin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKUserLogin::MergeFrom(const ACKUserLogin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKUserLogin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKUserLogin::CopyFrom(const ACKUserLogin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKUserLogin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ACKUserLogin::Swap(ACKUserLogin* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKUserLogin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKUserLogin_descriptor_;
  metadata.reflection = ACKUserLogin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SystemHorn::kContentFieldNumber;
#endif  // !_MSC_VER

SystemHorn::SystemHorn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SystemHorn::InitAsDefaultInstance() {
}

SystemHorn::SystemHorn(const SystemHorn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SystemHorn::SharedCtor() {
  _cached_size_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SystemHorn::~SystemHorn() {
  SharedDtor();
}

void SystemHorn::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void SystemHorn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SystemHorn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SystemHorn_descriptor_;
}

const SystemHorn& SystemHorn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

SystemHorn* SystemHorn::default_instance_ = NULL;

SystemHorn* SystemHorn::New() const {
  return new SystemHorn;
}

void SystemHorn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SystemHorn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes content = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SystemHorn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes content = 1;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SystemHorn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes content = 1;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SystemHorn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes content = 1;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemHorn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SystemHorn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SystemHorn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SystemHorn::MergeFrom(const SystemHorn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SystemHorn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SystemHorn::CopyFrom(const SystemHorn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemHorn::IsInitialized() const {

  return true;
}

void SystemHorn::Swap(SystemHorn* other) {
  if (other != this) {
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SystemHorn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SystemHorn_descriptor_;
  metadata.reflection = SystemHorn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFUseHorn::kHornTypeFieldNumber;
const int NTFUseHorn::kHornContentFieldNumber;
#endif  // !_MSC_VER

NTFUseHorn::NTFUseHorn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFUseHorn::InitAsDefaultInstance() {
}

NTFUseHorn::NTFUseHorn(const NTFUseHorn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFUseHorn::SharedCtor() {
  _cached_size_ = 0;
  horn_type_ = 0;
  horn_content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFUseHorn::~NTFUseHorn() {
  SharedDtor();
}

void NTFUseHorn::SharedDtor() {
  if (horn_content_ != &::google::protobuf::internal::kEmptyString) {
    delete horn_content_;
  }
  if (this != default_instance_) {
  }
}

void NTFUseHorn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFUseHorn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFUseHorn_descriptor_;
}

const NTFUseHorn& NTFUseHorn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFUseHorn* NTFUseHorn::default_instance_ = NULL;

NTFUseHorn* NTFUseHorn::New() const {
  return new NTFUseHorn;
}

void NTFUseHorn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    horn_type_ = 0;
    if (has_horn_content()) {
      if (horn_content_ != &::google::protobuf::internal::kEmptyString) {
        horn_content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFUseHorn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 horn_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horn_type_)));
          set_has_horn_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_horn_content;
        break;
      }

      // optional bytes horn_content = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_horn_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_horn_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFUseHorn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 horn_type = 1;
  if (has_horn_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->horn_type(), output);
  }

  // optional bytes horn_content = 2;
  if (has_horn_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->horn_content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFUseHorn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 horn_type = 1;
  if (has_horn_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->horn_type(), target);
  }

  // optional bytes horn_content = 2;
  if (has_horn_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->horn_content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFUseHorn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 horn_type = 1;
    if (has_horn_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horn_type());
    }

    // optional bytes horn_content = 2;
    if (has_horn_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->horn_content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFUseHorn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFUseHorn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFUseHorn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFUseHorn::MergeFrom(const NTFUseHorn& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horn_type()) {
      set_horn_type(from.horn_type());
    }
    if (from.has_horn_content()) {
      set_horn_content(from.horn_content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFUseHorn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFUseHorn::CopyFrom(const NTFUseHorn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFUseHorn::IsInitialized() const {

  return true;
}

void NTFUseHorn::Swap(NTFUseHorn* other) {
  if (other != this) {
    std::swap(horn_type_, other->horn_type_);
    std::swap(horn_content_, other->horn_content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFUseHorn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFUseHorn_descriptor_;
  metadata.reflection = NTFUseHorn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQMatchTable::kRoomidFieldNumber;
#endif  // !_MSC_VER

REQMatchTable::REQMatchTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQMatchTable::InitAsDefaultInstance() {
}

REQMatchTable::REQMatchTable(const REQMatchTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQMatchTable::SharedCtor() {
  _cached_size_ = 0;
  roomid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQMatchTable::~REQMatchTable() {
  SharedDtor();
}

void REQMatchTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQMatchTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQMatchTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQMatchTable_descriptor_;
}

const REQMatchTable& REQMatchTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

REQMatchTable* REQMatchTable::default_instance_ = NULL;

REQMatchTable* REQMatchTable::New() const {
  return new REQMatchTable;
}

void REQMatchTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    roomid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQMatchTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 roomid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQMatchTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->roomid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQMatchTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 roomid = 1;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->roomid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQMatchTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 roomid = 1;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQMatchTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQMatchTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQMatchTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQMatchTable::MergeFrom(const REQMatchTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQMatchTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQMatchTable::CopyFrom(const REQMatchTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQMatchTable::IsInitialized() const {

  return true;
}

void REQMatchTable::Swap(REQMatchTable* other) {
  if (other != this) {
    std::swap(roomid_, other->roomid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQMatchTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQMatchTable_descriptor_;
  metadata.reflection = REQMatchTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKMatchTable::kCodeFieldNumber;
const int ACKMatchTable::kRoomidFieldNumber;
const int ACKMatchTable::kTableidFieldNumber;
const int ACKMatchTable::kSeatidFieldNumber;
#endif  // !_MSC_VER

ACKMatchTable::ACKMatchTable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKMatchTable::InitAsDefaultInstance() {
}

ACKMatchTable::ACKMatchTable(const ACKMatchTable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKMatchTable::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  roomid_ = 0;
  tableid_ = 0;
  seatid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKMatchTable::~ACKMatchTable() {
  SharedDtor();
}

void ACKMatchTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKMatchTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKMatchTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKMatchTable_descriptor_;
}

const ACKMatchTable& ACKMatchTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

ACKMatchTable* ACKMatchTable::default_instance_ = NULL;

ACKMatchTable* ACKMatchTable::New() const {
  return new ACKMatchTable;
}

void ACKMatchTable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    roomid_ = 0;
    tableid_ = 0;
    seatid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKMatchTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_roomid;
        break;
      }

      // optional int32 roomid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roomid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roomid_)));
          set_has_roomid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_tableid;
        break;
      }

      // optional int32 tableid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tableid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tableid_)));
          set_has_tableid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_seatid;
        break;
      }

      // optional int32 seatid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seatid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seatid_)));
          set_has_seatid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKMatchTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roomid(), output);
  }

  // optional int32 tableid = 3;
  if (has_tableid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tableid(), output);
  }

  // optional int32 seatid = 4;
  if (has_seatid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->seatid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKMatchTable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional int32 roomid = 2;
  if (has_roomid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roomid(), target);
  }

  // optional int32 tableid = 3;
  if (has_tableid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->tableid(), target);
  }

  // optional int32 seatid = 4;
  if (has_seatid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->seatid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKMatchTable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 roomid = 2;
    if (has_roomid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roomid());
    }

    // optional int32 tableid = 3;
    if (has_tableid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tableid());
    }

    // optional int32 seatid = 4;
    if (has_seatid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seatid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKMatchTable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKMatchTable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKMatchTable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKMatchTable::MergeFrom(const ACKMatchTable& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_roomid()) {
      set_roomid(from.roomid());
    }
    if (from.has_tableid()) {
      set_tableid(from.tableid());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKMatchTable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKMatchTable::CopyFrom(const ACKMatchTable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKMatchTable::IsInitialized() const {

  return true;
}

void ACKMatchTable::Swap(ACKMatchTable* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(roomid_, other->roomid_);
    std::swap(tableid_, other->tableid_);
    std::swap(seatid_, other->seatid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKMatchTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKMatchTable_descriptor_;
  metadata.reflection = ACKMatchTable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQPrivyJoinGame::kUserIdFieldNumber;
const int REQPrivyJoinGame::kSessionKeyFieldNumber;
const int REQPrivyJoinGame::kClientVersionFieldNumber;
const int REQPrivyJoinGame::kTableIdFieldNumber;
#endif  // !_MSC_VER

REQPrivyJoinGame::REQPrivyJoinGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQPrivyJoinGame::InitAsDefaultInstance() {
}

REQPrivyJoinGame::REQPrivyJoinGame(const REQPrivyJoinGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQPrivyJoinGame::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_version_ = 0;
  table_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQPrivyJoinGame::~REQPrivyJoinGame() {
  SharedDtor();
}

void REQPrivyJoinGame::SharedDtor() {
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (this != default_instance_) {
  }
}

void REQPrivyJoinGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQPrivyJoinGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQPrivyJoinGame_descriptor_;
}

const REQPrivyJoinGame& REQPrivyJoinGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

REQPrivyJoinGame* REQPrivyJoinGame::default_instance_ = NULL;

REQPrivyJoinGame* REQPrivyJoinGame::New() const {
  return new REQPrivyJoinGame;
}

void REQPrivyJoinGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::kEmptyString) {
        session_key_->clear();
      }
    }
    client_version_ = 0;
    table_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQPrivyJoinGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_key;
        break;
      }

      // required bytes session_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_version;
        break;
      }

      // required int32 client_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQPrivyJoinGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required bytes session_key = 2;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->session_key(), output);
  }

  // required int32 client_version = 3;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_version(), output);
  }

  // required int32 table_id = 4;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQPrivyJoinGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // required bytes session_key = 2;
  if (has_session_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->session_key(), target);
  }

  // required int32 client_version = 3;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_version(), target);
  }

  // required int32 table_id = 4;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQPrivyJoinGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required bytes session_key = 2;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_key());
    }

    // required int32 client_version = 3;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_version());
    }

    // required int32 table_id = 4;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQPrivyJoinGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQPrivyJoinGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQPrivyJoinGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQPrivyJoinGame::MergeFrom(const REQPrivyJoinGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQPrivyJoinGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQPrivyJoinGame::CopyFrom(const REQPrivyJoinGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQPrivyJoinGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void REQPrivyJoinGame::Swap(REQPrivyJoinGame* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_key_, other->session_key_);
    std::swap(client_version_, other->client_version_);
    std::swap(table_id_, other->table_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQPrivyJoinGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQPrivyJoinGame_descriptor_;
  metadata.reflection = REQPrivyJoinGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKPrivyJoinGame::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKPrivyJoinGame::ACKPrivyJoinGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKPrivyJoinGame::InitAsDefaultInstance() {
}

ACKPrivyJoinGame::ACKPrivyJoinGame(const ACKPrivyJoinGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKPrivyJoinGame::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKPrivyJoinGame::~ACKPrivyJoinGame() {
  SharedDtor();
}

void ACKPrivyJoinGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKPrivyJoinGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKPrivyJoinGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKPrivyJoinGame_descriptor_;
}

const ACKPrivyJoinGame& ACKPrivyJoinGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

ACKPrivyJoinGame* ACKPrivyJoinGame::default_instance_ = NULL;

ACKPrivyJoinGame* ACKPrivyJoinGame::New() const {
  return new ACKPrivyJoinGame;
}

void ACKPrivyJoinGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKPrivyJoinGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKPrivyJoinGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKPrivyJoinGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKPrivyJoinGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_id = 1 [default = 0];
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKPrivyJoinGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKPrivyJoinGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKPrivyJoinGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKPrivyJoinGame::MergeFrom(const ACKPrivyJoinGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKPrivyJoinGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKPrivyJoinGame::CopyFrom(const ACKPrivyJoinGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKPrivyJoinGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ACKPrivyJoinGame::Swap(ACKPrivyJoinGame* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKPrivyJoinGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKPrivyJoinGame_descriptor_;
  metadata.reflection = ACKPrivyJoinGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

REQLeaveGame::REQLeaveGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQLeaveGame::InitAsDefaultInstance() {
}

REQLeaveGame::REQLeaveGame(const REQLeaveGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQLeaveGame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQLeaveGame::~REQLeaveGame() {
  SharedDtor();
}

void REQLeaveGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQLeaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQLeaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQLeaveGame_descriptor_;
}

const REQLeaveGame& REQLeaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

REQLeaveGame* REQLeaveGame::default_instance_ = NULL;

REQLeaveGame* REQLeaveGame::New() const {
  return new REQLeaveGame;
}

void REQLeaveGame::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQLeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void REQLeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQLeaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQLeaveGame::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQLeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQLeaveGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQLeaveGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQLeaveGame::MergeFrom(const REQLeaveGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQLeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQLeaveGame::CopyFrom(const REQLeaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQLeaveGame::IsInitialized() const {

  return true;
}

void REQLeaveGame::Swap(REQLeaveGame* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQLeaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQLeaveGame_descriptor_;
  metadata.reflection = REQLeaveGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKLeaveGame::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKLeaveGame::ACKLeaveGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKLeaveGame::InitAsDefaultInstance() {
}

ACKLeaveGame::ACKLeaveGame(const ACKLeaveGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKLeaveGame::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKLeaveGame::~ACKLeaveGame() {
  SharedDtor();
}

void ACKLeaveGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKLeaveGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKLeaveGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKLeaveGame_descriptor_;
}

const ACKLeaveGame& ACKLeaveGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

ACKLeaveGame* ACKLeaveGame::default_instance_ = NULL;

ACKLeaveGame* ACKLeaveGame::New() const {
  return new ACKLeaveGame;
}

void ACKLeaveGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKLeaveGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKLeaveGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKLeaveGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKLeaveGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_id = 1 [default = 0];
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKLeaveGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKLeaveGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKLeaveGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKLeaveGame::MergeFrom(const ACKLeaveGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKLeaveGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKLeaveGame::CopyFrom(const ACKLeaveGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKLeaveGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ACKLeaveGame::Swap(ACKLeaveGame* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKLeaveGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKLeaveGame_descriptor_;
  metadata.reflection = ACKLeaveGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQRejoinGame::kUserIdFieldNumber;
const int REQRejoinGame::kSessionKeyFieldNumber;
const int REQRejoinGame::kClientVersionFieldNumber;
const int REQRejoinGame::kTableIdFieldNumber;
const int REQRejoinGame::kSeatIdFieldNumber;
const int REQRejoinGame::kSeqIdFieldNumber;
#endif  // !_MSC_VER

REQRejoinGame::REQRejoinGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQRejoinGame::InitAsDefaultInstance() {
}

REQRejoinGame::REQRejoinGame(const REQRejoinGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQRejoinGame::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  session_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  client_version_ = 0;
  table_id_ = 0;
  seat_id_ = 0;
  seq_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQRejoinGame::~REQRejoinGame() {
  SharedDtor();
}

void REQRejoinGame::SharedDtor() {
  if (session_key_ != &::google::protobuf::internal::kEmptyString) {
    delete session_key_;
  }
  if (this != default_instance_) {
  }
}

void REQRejoinGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQRejoinGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQRejoinGame_descriptor_;
}

const REQRejoinGame& REQRejoinGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

REQRejoinGame* REQRejoinGame::default_instance_ = NULL;

REQRejoinGame* REQRejoinGame::New() const {
  return new REQRejoinGame;
}

void REQRejoinGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
    if (has_session_key()) {
      if (session_key_ != &::google::protobuf::internal::kEmptyString) {
        session_key_->clear();
      }
    }
    client_version_ = 0;
    table_id_ = 0;
    seat_id_ = 0;
    seq_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQRejoinGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_session_key;
        break;
      }

      // required bytes session_key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_session_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_key()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_client_version;
        break;
      }

      // required int32 client_version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_client_version:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &client_version_)));
          set_has_client_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_table_id;
        break;
      }

      // required int32 table_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_table_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_id_)));
          set_has_table_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_seat_id;
        break;
      }

      // required int32 seat_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_seq_id;
        break;
      }

      // required int32 seq_id = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seq_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seq_id_)));
          set_has_seq_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQRejoinGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required bytes session_key = 2;
  if (has_session_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->session_key(), output);
  }

  // required int32 client_version = 3;
  if (has_client_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->client_version(), output);
  }

  // required int32 table_id = 4;
  if (has_table_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->table_id(), output);
  }

  // required int32 seat_id = 5;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->seat_id(), output);
  }

  // required int32 seq_id = 6;
  if (has_seq_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->seq_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQRejoinGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // required bytes session_key = 2;
  if (has_session_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->session_key(), target);
  }

  // required int32 client_version = 3;
  if (has_client_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->client_version(), target);
  }

  // required int32 table_id = 4;
  if (has_table_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->table_id(), target);
  }

  // required int32 seat_id = 5;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->seat_id(), target);
  }

  // required int32 seq_id = 6;
  if (has_seq_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->seq_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQRejoinGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required bytes session_key = 2;
    if (has_session_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->session_key());
    }

    // required int32 client_version = 3;
    if (has_client_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->client_version());
    }

    // required int32 table_id = 4;
    if (has_table_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table_id());
    }

    // required int32 seat_id = 5;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // required int32 seq_id = 6;
    if (has_seq_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seq_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQRejoinGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQRejoinGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQRejoinGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQRejoinGame::MergeFrom(const REQRejoinGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_session_key()) {
      set_session_key(from.session_key());
    }
    if (from.has_client_version()) {
      set_client_version(from.client_version());
    }
    if (from.has_table_id()) {
      set_table_id(from.table_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_seq_id()) {
      set_seq_id(from.seq_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQRejoinGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQRejoinGame::CopyFrom(const REQRejoinGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQRejoinGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void REQRejoinGame::Swap(REQRejoinGame* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(session_key_, other->session_key_);
    std::swap(client_version_, other->client_version_);
    std::swap(table_id_, other->table_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(seq_id_, other->seq_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQRejoinGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQRejoinGame_descriptor_;
  metadata.reflection = REQRejoinGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKRejoinGame::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKRejoinGame::ACKRejoinGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKRejoinGame::InitAsDefaultInstance() {
}

ACKRejoinGame::ACKRejoinGame(const ACKRejoinGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKRejoinGame::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKRejoinGame::~ACKRejoinGame() {
  SharedDtor();
}

void ACKRejoinGame::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKRejoinGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKRejoinGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKRejoinGame_descriptor_;
}

const ACKRejoinGame& ACKRejoinGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

ACKRejoinGame* ACKRejoinGame::default_instance_ = NULL;

ACKRejoinGame* ACKRejoinGame::New() const {
  return new ACKRejoinGame;
}

void ACKRejoinGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKRejoinGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKRejoinGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKRejoinGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKRejoinGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_id = 1 [default = 0];
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKRejoinGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKRejoinGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKRejoinGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKRejoinGame::MergeFrom(const ACKRejoinGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKRejoinGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKRejoinGame::CopyFrom(const ACKRejoinGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKRejoinGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ACKRejoinGame::Swap(ACKRejoinGame* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKRejoinGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKRejoinGame_descriptor_;
  metadata.reflection = ACKRejoinGame_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQPrivySitDown::kSeatIdFieldNumber;
#endif  // !_MSC_VER

REQPrivySitDown::REQPrivySitDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQPrivySitDown::InitAsDefaultInstance() {
}

REQPrivySitDown::REQPrivySitDown(const REQPrivySitDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQPrivySitDown::SharedCtor() {
  _cached_size_ = 0;
  seat_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQPrivySitDown::~REQPrivySitDown() {
  SharedDtor();
}

void REQPrivySitDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQPrivySitDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQPrivySitDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQPrivySitDown_descriptor_;
}

const REQPrivySitDown& REQPrivySitDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

REQPrivySitDown* REQPrivySitDown::default_instance_ = NULL;

REQPrivySitDown* REQPrivySitDown::New() const {
  return new REQPrivySitDown;
}

void REQPrivySitDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seat_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQPrivySitDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 seat_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQPrivySitDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seat_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQPrivySitDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 seat_id = 1;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seat_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQPrivySitDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 seat_id = 1;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQPrivySitDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQPrivySitDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQPrivySitDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQPrivySitDown::MergeFrom(const REQPrivySitDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQPrivySitDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQPrivySitDown::CopyFrom(const REQPrivySitDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQPrivySitDown::IsInitialized() const {

  return true;
}

void REQPrivySitDown::Swap(REQPrivySitDown* other) {
  if (other != this) {
    std::swap(seat_id_, other->seat_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQPrivySitDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQPrivySitDown_descriptor_;
  metadata.reflection = REQPrivySitDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKPrivySitDown::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKPrivySitDown::ACKPrivySitDown()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKPrivySitDown::InitAsDefaultInstance() {
}

ACKPrivySitDown::ACKPrivySitDown(const ACKPrivySitDown& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKPrivySitDown::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKPrivySitDown::~ACKPrivySitDown() {
  SharedDtor();
}

void ACKPrivySitDown::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKPrivySitDown::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKPrivySitDown::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKPrivySitDown_descriptor_;
}

const ACKPrivySitDown& ACKPrivySitDown::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

ACKPrivySitDown* ACKPrivySitDown::default_instance_ = NULL;

ACKPrivySitDown* ACKPrivySitDown::New() const {
  return new ACKPrivySitDown;
}

void ACKPrivySitDown::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKPrivySitDown::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 result_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKPrivySitDown::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 result_id = 1;
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKPrivySitDown::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 result_id = 1;
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKPrivySitDown::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 result_id = 1;
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKPrivySitDown::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKPrivySitDown* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKPrivySitDown*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKPrivySitDown::MergeFrom(const ACKPrivySitDown& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKPrivySitDown::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKPrivySitDown::CopyFrom(const ACKPrivySitDown& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKPrivySitDown::IsInitialized() const {

  return true;
}

void ACKPrivySitDown::Swap(ACKPrivySitDown* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKPrivySitDown::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKPrivySitDown_descriptor_;
  metadata.reflection = ACKPrivySitDown_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

REQReady::REQReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQReady::InitAsDefaultInstance() {
}

REQReady::REQReady(const REQReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQReady::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQReady::~REQReady() {
  SharedDtor();
}

void REQReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQReady_descriptor_;
}

const REQReady& REQReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

REQReady* REQReady::default_instance_ = NULL;

REQReady* REQReady::New() const {
  return new REQReady;
}

void REQReady::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void REQReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQReady::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQReady::MergeFrom(const REQReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQReady::CopyFrom(const REQReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQReady::IsInitialized() const {

  return true;
}

void REQReady::Swap(REQReady* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQReady_descriptor_;
  metadata.reflection = REQReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACKReady::kResultIdFieldNumber;
#endif  // !_MSC_VER

ACKReady::ACKReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACKReady::InitAsDefaultInstance() {
}

ACKReady::ACKReady(const ACKReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACKReady::SharedCtor() {
  _cached_size_ = 0;
  result_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACKReady::~ACKReady() {
  SharedDtor();
}

void ACKReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACKReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACKReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACKReady_descriptor_;
}

const ACKReady& ACKReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

ACKReady* ACKReady::default_instance_ = NULL;

ACKReady* ACKReady::New() const {
  return new ACKReady;
}

void ACKReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACKReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result_id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_id_)));
          set_has_result_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACKReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACKReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result_id = 1 [default = 0];
  if (has_result_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACKReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result_id = 1 [default = 0];
    if (has_result_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACKReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACKReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACKReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACKReady::MergeFrom(const ACKReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result_id()) {
      set_result_id(from.result_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACKReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACKReady::CopyFrom(const ACKReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACKReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ACKReady::Swap(ACKReady* other) {
  if (other != this) {
    std::swap(result_id_, other->result_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACKReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACKReady_descriptor_;
  metadata.reflection = ACKReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableEventItem::kEventTypeFieldNumber;
const int TableEventItem::kUserIdFieldNumber;
const int TableEventItem::kSeatIdFieldNumber;
const int TableEventItem::kKickReasonFieldNumber;
const int TableEventItem::kKickedUserIdFieldNumber;
const int TableEventItem::kPbBufferFieldNumber;
#endif  // !_MSC_VER

TableEventItem::TableEventItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableEventItem::InitAsDefaultInstance() {
}

TableEventItem::TableEventItem(const TableEventItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableEventItem::SharedCtor() {
  _cached_size_ = 0;
  event_type_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  seat_id_ = 0;
  kick_reason_ = 0;
  kicked_user_id_ = GOOGLE_LONGLONG(0);
  pb_buffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableEventItem::~TableEventItem() {
  SharedDtor();
}

void TableEventItem::SharedDtor() {
  if (pb_buffer_ != &::google::protobuf::internal::kEmptyString) {
    delete pb_buffer_;
  }
  if (this != default_instance_) {
  }
}

void TableEventItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableEventItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableEventItem_descriptor_;
}

const TableEventItem& TableEventItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

TableEventItem* TableEventItem::default_instance_ = NULL;

TableEventItem* TableEventItem::New() const {
  return new TableEventItem;
}

void TableEventItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    event_type_ = 0;
    user_id_ = GOOGLE_LONGLONG(0);
    seat_id_ = 0;
    kick_reason_ = 0;
    kicked_user_id_ = GOOGLE_LONGLONG(0);
    if (has_pb_buffer()) {
      if (pb_buffer_ != &::google::protobuf::internal::kEmptyString) {
        pb_buffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableEventItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 event_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &event_type_)));
          set_has_event_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_user_id;
        break;
      }

      // optional int64 user_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_seat_id;
        break;
      }

      // optional int32 seat_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kick_reason;
        break;
      }

      // optional int32 kick_reason = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kick_reason:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kick_reason_)));
          set_has_kick_reason();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kicked_user_id;
        break;
      }

      // optional int64 kicked_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kicked_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &kicked_user_id_)));
          set_has_kicked_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_pb_buffer;
        break;
      }

      // optional bytes pb_buffer = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pb_buffer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pb_buffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableEventItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 event_type = 1;
  if (has_event_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->event_type(), output);
  }

  // optional int64 user_id = 2;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->user_id(), output);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->seat_id(), output);
  }

  // optional int32 kick_reason = 4;
  if (has_kick_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kick_reason(), output);
  }

  // optional int64 kicked_user_id = 5;
  if (has_kicked_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->kicked_user_id(), output);
  }

  // optional bytes pb_buffer = 6;
  if (has_pb_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->pb_buffer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableEventItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 event_type = 1;
  if (has_event_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->event_type(), target);
  }

  // optional int64 user_id = 2;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->user_id(), target);
  }

  // optional int32 seat_id = 3;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->seat_id(), target);
  }

  // optional int32 kick_reason = 4;
  if (has_kick_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kick_reason(), target);
  }

  // optional int64 kicked_user_id = 5;
  if (has_kicked_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->kicked_user_id(), target);
  }

  // optional bytes pb_buffer = 6;
  if (has_pb_buffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->pb_buffer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableEventItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 event_type = 1;
    if (has_event_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->event_type());
    }

    // optional int64 user_id = 2;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int32 seat_id = 3;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // optional int32 kick_reason = 4;
    if (has_kick_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kick_reason());
    }

    // optional int64 kicked_user_id = 5;
    if (has_kicked_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->kicked_user_id());
    }

    // optional bytes pb_buffer = 6;
    if (has_pb_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->pb_buffer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableEventItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableEventItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableEventItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableEventItem::MergeFrom(const TableEventItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_event_type()) {
      set_event_type(from.event_type());
    }
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_kick_reason()) {
      set_kick_reason(from.kick_reason());
    }
    if (from.has_kicked_user_id()) {
      set_kicked_user_id(from.kicked_user_id());
    }
    if (from.has_pb_buffer()) {
      set_pb_buffer(from.pb_buffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableEventItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableEventItem::CopyFrom(const TableEventItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableEventItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TableEventItem::Swap(TableEventItem* other) {
  if (other != this) {
    std::swap(event_type_, other->event_type_);
    std::swap(user_id_, other->user_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(kick_reason_, other->kick_reason_);
    std::swap(kicked_user_id_, other->kicked_user_id_);
    std::swap(pb_buffer_, other->pb_buffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableEventItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableEventItem_descriptor_;
  metadata.reflection = TableEventItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableInfoItem::kUserIdFieldNumber;
const int TableInfoItem::kSeatIdFieldNumber;
const int TableInfoItem::kIdentityTypeFieldNumber;
const int TableInfoItem::kStateTypeFieldNumber;
const int TableInfoItem::kStateLineFieldNumber;
#endif  // !_MSC_VER

TableInfoItem::TableInfoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableInfoItem::InitAsDefaultInstance() {
}

TableInfoItem::TableInfoItem(const TableInfoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableInfoItem::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  seat_id_ = 0;
  identity_type_ = 0;
  state_type_ = 0;
  state_line_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableInfoItem::~TableInfoItem() {
  SharedDtor();
}

void TableInfoItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableInfoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableInfoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableInfoItem_descriptor_;
}

const TableInfoItem& TableInfoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

TableInfoItem* TableInfoItem::default_instance_ = NULL;

TableInfoItem* TableInfoItem::New() const {
  return new TableInfoItem;
}

void TableInfoItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
    seat_id_ = 0;
    identity_type_ = 0;
    state_type_ = 0;
    state_line_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableInfoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat_id;
        break;
      }

      // required int32 seat_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_id_)));
          set_has_seat_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_identity_type;
        break;
      }

      // required int32 identity_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_identity_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &identity_type_)));
          set_has_identity_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_state_type;
        break;
      }

      // required int32 state_type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_type_)));
          set_has_state_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_state_line;
        break;
      }

      // optional int32 state_line = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state_line:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_line_)));
          set_has_state_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableInfoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // required int32 seat_id = 2;
  if (has_seat_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat_id(), output);
  }

  // required int32 identity_type = 3;
  if (has_identity_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->identity_type(), output);
  }

  // required int32 state_type = 4;
  if (has_state_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->state_type(), output);
  }

  // optional int32 state_line = 5;
  if (has_state_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->state_line(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableInfoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // required int32 seat_id = 2;
  if (has_seat_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat_id(), target);
  }

  // required int32 identity_type = 3;
  if (has_identity_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->identity_type(), target);
  }

  // required int32 state_type = 4;
  if (has_state_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->state_type(), target);
  }

  // optional int32 state_line = 5;
  if (has_state_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->state_line(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableInfoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // required int32 seat_id = 2;
    if (has_seat_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat_id());
    }

    // required int32 identity_type = 3;
    if (has_identity_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->identity_type());
    }

    // required int32 state_type = 4;
    if (has_state_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state_type());
    }

    // optional int32 state_line = 5;
    if (has_state_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state_line());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableInfoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableInfoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableInfoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableInfoItem::MergeFrom(const TableInfoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_seat_id()) {
      set_seat_id(from.seat_id());
    }
    if (from.has_identity_type()) {
      set_identity_type(from.identity_type());
    }
    if (from.has_state_type()) {
      set_state_type(from.state_type());
    }
    if (from.has_state_line()) {
      set_state_line(from.state_line());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableInfoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInfoItem::CopyFrom(const TableInfoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfoItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TableInfoItem::Swap(TableInfoItem* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(seat_id_, other->seat_id_);
    std::swap(identity_type_, other->identity_type_);
    std::swap(state_type_, other->state_type_);
    std::swap(state_line_, other->state_line_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableInfoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableInfoItem_descriptor_;
  metadata.reflection = TableInfoItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TableInfo::kInfoListFieldNumber;
#endif  // !_MSC_VER

TableInfo::TableInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TableInfo::InitAsDefaultInstance() {
}

TableInfo::TableInfo(const TableInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TableInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableInfo::~TableInfo() {
  SharedDtor();
}

void TableInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TableInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableInfo_descriptor_;
}

const TableInfo& TableInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

TableInfo* TableInfo::default_instance_ = NULL;

TableInfo* TableInfo::New() const {
  return new TableInfo;
}

void TableInfo::Clear() {
  info_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TableInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TableInfoItem info_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TableInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TableInfoItem info_list = 1;
  for (int i = 0; i < this->info_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TableInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TableInfoItem info_list = 1;
  for (int i = 0; i < this->info_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TableInfo::ByteSize() const {
  int total_size = 0;

  // repeated .TableInfoItem info_list = 1;
  total_size += 1 * this->info_list_size();
  for (int i = 0; i < this->info_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TableInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TableInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TableInfo::MergeFrom(const TableInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_list_.MergeFrom(from.info_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TableInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableInfo::CopyFrom(const TableInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableInfo::IsInitialized() const {

  for (int i = 0; i < info_list_size(); i++) {
    if (!this->info_list(i).IsInitialized()) return false;
  }
  return true;
}

void TableInfo::Swap(TableInfo* other) {
  if (other != this) {
    info_list_.Swap(&other->info_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TableInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableInfo_descriptor_;
  metadata.reflection = TableInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UserInfo::kGenderFieldNumber;
const int UserInfo::kFaceFieldNumber;
const int UserInfo::kNickFieldNumber;
const int UserInfo::kLoginipFieldNumber;
#endif  // !_MSC_VER

UserInfo::UserInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UserInfo::InitAsDefaultInstance() {
}

UserInfo::UserInfo(const UserInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UserInfo::SharedCtor() {
  _cached_size_ = 0;
  gender_ = 0;
  face_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nick_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserInfo::~UserInfo() {
  SharedDtor();
}

void UserInfo::SharedDtor() {
  if (face_ != &::google::protobuf::internal::kEmptyString) {
    delete face_;
  }
  if (nick_ != &::google::protobuf::internal::kEmptyString) {
    delete nick_;
  }
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    delete loginip_;
  }
  if (this != default_instance_) {
  }
}

void UserInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserInfo_descriptor_;
}

const UserInfo& UserInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

UserInfo* UserInfo::default_instance_ = NULL;

UserInfo* UserInfo::New() const {
  return new UserInfo;
}

void UserInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    gender_ = 0;
    if (has_face()) {
      if (face_ != &::google::protobuf::internal::kEmptyString) {
        face_->clear();
      }
    }
    if (has_nick()) {
      if (nick_ != &::google::protobuf::internal::kEmptyString) {
        nick_->clear();
      }
    }
    if (has_loginip()) {
      if (loginip_ != &::google::protobuf::internal::kEmptyString) {
        loginip_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UserInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 gender = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_face;
        break;
      }

      // optional bytes face = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_face:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_face()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_nick;
        break;
      }

      // optional bytes nick = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_nick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_loginip;
        break;
      }

      // optional bytes loginip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_loginip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UserInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 gender = 1;
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gender(), output);
  }

  // optional bytes face = 2;
  if (has_face()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->face(), output);
  }

  // optional bytes nick = 3;
  if (has_nick()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->nick(), output);
  }

  // optional bytes loginip = 4;
  if (has_loginip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->loginip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UserInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 gender = 1;
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gender(), target);
  }

  // optional bytes face = 2;
  if (has_face()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->face(), target);
  }

  // optional bytes nick = 3;
  if (has_nick()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->nick(), target);
  }

  // optional bytes loginip = 4;
  if (has_loginip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->loginip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UserInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 gender = 1;
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }

    // optional bytes face = 2;
    if (has_face()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->face());
    }

    // optional bytes nick = 3;
    if (has_nick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->nick());
    }

    // optional bytes loginip = 4;
    if (has_loginip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->loginip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UserInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UserInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UserInfo::MergeFrom(const UserInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_face()) {
      set_face(from.face());
    }
    if (from.has_nick()) {
      set_nick(from.nick());
    }
    if (from.has_loginip()) {
      set_loginip(from.loginip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UserInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserInfo::CopyFrom(const UserInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserInfo::IsInitialized() const {

  return true;
}

void UserInfo::Swap(UserInfo* other) {
  if (other != this) {
    std::swap(gender_, other->gender_);
    std::swap(face_, other->face_);
    std::swap(nick_, other->nick_);
    std::swap(loginip_, other->loginip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UserInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserInfo_descriptor_;
  metadata.reflection = UserInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFTableEvent::kEventListFieldNumber;
#endif  // !_MSC_VER

NTFTableEvent::NTFTableEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFTableEvent::InitAsDefaultInstance() {
}

NTFTableEvent::NTFTableEvent(const NTFTableEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFTableEvent::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFTableEvent::~NTFTableEvent() {
  SharedDtor();
}

void NTFTableEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFTableEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFTableEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFTableEvent_descriptor_;
}

const NTFTableEvent& NTFTableEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFTableEvent* NTFTableEvent::default_instance_ = NULL;

NTFTableEvent* NTFTableEvent::New() const {
  return new NTFTableEvent;
}

void NTFTableEvent::Clear() {
  event_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFTableEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TableEventItem event_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_event_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_event_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_event_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFTableEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TableEventItem event_list = 1;
  for (int i = 0; i < this->event_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->event_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFTableEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TableEventItem event_list = 1;
  for (int i = 0; i < this->event_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->event_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFTableEvent::ByteSize() const {
  int total_size = 0;

  // repeated .TableEventItem event_list = 1;
  total_size += 1 * this->event_list_size();
  for (int i = 0; i < this->event_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->event_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFTableEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFTableEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFTableEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFTableEvent::MergeFrom(const NTFTableEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  event_list_.MergeFrom(from.event_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFTableEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFTableEvent::CopyFrom(const NTFTableEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFTableEvent::IsInitialized() const {

  for (int i = 0; i < event_list_size(); i++) {
    if (!this->event_list(i).IsInitialized()) return false;
  }
  return true;
}

void NTFTableEvent::Swap(NTFTableEvent* other) {
  if (other != this) {
    event_list_.Swap(&other->event_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFTableEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFTableEvent_descriptor_;
  metadata.reflection = NTFTableEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerGameInfo::kUserIdFieldNumber;
const int PlayerGameInfo::kScoreFieldNumber;
const int PlayerGameInfo::kWinsFieldNumber;
const int PlayerGameInfo::kLosesFieldNumber;
#endif  // !_MSC_VER

PlayerGameInfo::PlayerGameInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerGameInfo::InitAsDefaultInstance() {
}

PlayerGameInfo::PlayerGameInfo(const PlayerGameInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerGameInfo::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  wins_ = 0;
  loses_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerGameInfo::~PlayerGameInfo() {
  SharedDtor();
}

void PlayerGameInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerGameInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerGameInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerGameInfo_descriptor_;
}

const PlayerGameInfo& PlayerGameInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

PlayerGameInfo* PlayerGameInfo::default_instance_ = NULL;

PlayerGameInfo* PlayerGameInfo::New() const {
  return new PlayerGameInfo;
}

void PlayerGameInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
    score_ = 0;
    wins_ = 0;
    loses_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerGameInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_wins;
        break;
      }

      // optional int32 wins = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_loses;
        break;
      }

      // optional int32 loses = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loses_)));
          set_has_loses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerGameInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  // optional int32 wins = 3;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->wins(), output);
  }

  // optional int32 loses = 4;
  if (has_loses()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->loses(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerGameInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  // optional int32 wins = 3;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->wins(), target);
  }

  // optional int32 loses = 4;
  if (has_loses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->loses(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerGameInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 wins = 3;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wins());
    }

    // optional int32 loses = 4;
    if (has_loses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loses());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerGameInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerGameInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerGameInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerGameInfo::MergeFrom(const PlayerGameInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_loses()) {
      set_loses(from.loses());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerGameInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerGameInfo::CopyFrom(const PlayerGameInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerGameInfo::IsInitialized() const {

  return true;
}

void PlayerGameInfo::Swap(PlayerGameInfo* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(score_, other->score_);
    std::swap(wins_, other->wins_);
    std::swap(loses_, other->loses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerGameInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerGameInfo_descriptor_;
  metadata.reflection = PlayerGameInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

NTFGameInit::NTFGameInit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFGameInit::InitAsDefaultInstance() {
}

NTFGameInit::NTFGameInit(const NTFGameInit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFGameInit::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFGameInit::~NTFGameInit() {
  SharedDtor();
}

void NTFGameInit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFGameInit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFGameInit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFGameInit_descriptor_;
}

const NTFGameInit& NTFGameInit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFGameInit* NTFGameInit::default_instance_ = NULL;

NTFGameInit* NTFGameInit::New() const {
  return new NTFGameInit;
}

void NTFGameInit::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFGameInit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void NTFGameInit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFGameInit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFGameInit::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFGameInit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFGameInit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFGameInit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFGameInit::MergeFrom(const NTFGameInit& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFGameInit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFGameInit::CopyFrom(const NTFGameInit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFGameInit::IsInitialized() const {

  return true;
}

void NTFGameInit::Swap(NTFGameInit* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFGameInit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFGameInit_descriptor_;
  metadata.reflection = NTFGameInit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFDealCards::kCardIdFieldNumber;
const int NTFDealCards::kFstUserFieldNumber;
#endif  // !_MSC_VER

NTFDealCards::NTFDealCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFDealCards::InitAsDefaultInstance() {
}

NTFDealCards::NTFDealCards(const NTFDealCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFDealCards::SharedCtor() {
  _cached_size_ = 0;
  fst_user_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFDealCards::~NTFDealCards() {
  SharedDtor();
}

void NTFDealCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFDealCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFDealCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFDealCards_descriptor_;
}

const NTFDealCards& NTFDealCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFDealCards* NTFDealCards::default_instance_ = NULL;

NTFDealCards* NTFDealCards::New() const {
  return new NTFDealCards;
}

void NTFDealCards::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    fst_user_ = GOOGLE_LONGLONG(0);
  }
  card_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFDealCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 card_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_card_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_card_id;
        if (input->ExpectTag(16)) goto parse_fst_user;
        break;
      }

      // optional int64 fst_user = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fst_user:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fst_user_)));
          set_has_fst_user();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFDealCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 card_id = 1;
  for (int i = 0; i < this->card_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->card_id(i), output);
  }

  // optional int64 fst_user = 2;
  if (has_fst_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->fst_user(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFDealCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 card_id = 1;
  for (int i = 0; i < this->card_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->card_id(i), target);
  }

  // optional int64 fst_user = 2;
  if (has_fst_user()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->fst_user(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFDealCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 fst_user = 2;
    if (has_fst_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fst_user());
    }

  }
  // repeated int32 card_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card_id(i));
    }
    total_size += 1 * this->card_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFDealCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFDealCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFDealCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFDealCards::MergeFrom(const NTFDealCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_id_.MergeFrom(from.card_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_fst_user()) {
      set_fst_user(from.fst_user());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFDealCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFDealCards::CopyFrom(const NTFDealCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFDealCards::IsInitialized() const {

  return true;
}

void NTFDealCards::Swap(NTFDealCards* other) {
  if (other != this) {
    card_id_.Swap(&other->card_id_);
    std::swap(fst_user_, other->fst_user_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFDealCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFDealCards_descriptor_;
  metadata.reflection = NTFDealCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

REQDealEnd::REQDealEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQDealEnd::InitAsDefaultInstance() {
}

REQDealEnd::REQDealEnd(const REQDealEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQDealEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQDealEnd::~REQDealEnd() {
  SharedDtor();
}

void REQDealEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQDealEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQDealEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQDealEnd_descriptor_;
}

const REQDealEnd& REQDealEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

REQDealEnd* REQDealEnd::default_instance_ = NULL;

REQDealEnd* REQDealEnd::New() const {
  return new REQDealEnd;
}

void REQDealEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQDealEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void REQDealEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQDealEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQDealEnd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQDealEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQDealEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQDealEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQDealEnd::MergeFrom(const REQDealEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQDealEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQDealEnd::CopyFrom(const REQDealEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQDealEnd::IsInitialized() const {

  return true;
}

void REQDealEnd::Swap(REQDealEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQDealEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQDealEnd_descriptor_;
  metadata.reflection = REQDealEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFToken::kUserIdFieldNumber;
const int NTFToken::kTokenTypeFieldNumber;
#endif  // !_MSC_VER

NTFToken::NTFToken()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFToken::InitAsDefaultInstance() {
}

NTFToken::NTFToken(const NTFToken& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFToken::SharedCtor() {
  _cached_size_ = 0;
  token_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFToken::~NTFToken() {
  SharedDtor();
}

void NTFToken::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFToken::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFToken::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFToken_descriptor_;
}

const NTFToken& NTFToken::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFToken* NTFToken::default_instance_ = NULL;

NTFToken* NTFToken::New() const {
  return new NTFToken;
}

void NTFToken::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    token_type_ = 0;
  }
  user_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFToken::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_user_id;
        if (input->ExpectTag(16)) goto parse_token_type;
        break;
      }

      // optional int32 token_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_token_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &token_type_)));
          set_has_token_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFToken::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->user_id(i), output);
  }

  // optional int32 token_type = 2;
  if (has_token_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->token_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFToken::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 user_id = 1;
  for (int i = 0; i < this->user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->user_id(i), target);
  }

  // optional int32 token_type = 2;
  if (has_token_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->token_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFToken::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 token_type = 2;
    if (has_token_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->token_type());
    }

  }
  // repeated int64 user_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->user_id(i));
    }
    total_size += 1 * this->user_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFToken::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFToken* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFToken*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFToken::MergeFrom(const NTFToken& from) {
  GOOGLE_CHECK_NE(&from, this);
  user_id_.MergeFrom(from.user_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_token_type()) {
      set_token_type(from.token_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFToken::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFToken::CopyFrom(const NTFToken& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFToken::IsInitialized() const {

  return true;
}

void NTFToken::Swap(NTFToken* other) {
  if (other != this) {
    user_id_.Swap(&other->user_id_);
    std::swap(token_type_, other->token_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFToken::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFToken_descriptor_;
  metadata.reflection = NTFToken_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQPlayCards::kCardIdFieldNumber;
#endif  // !_MSC_VER

REQPlayCards::REQPlayCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQPlayCards::InitAsDefaultInstance() {
}

REQPlayCards::REQPlayCards(const REQPlayCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQPlayCards::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQPlayCards::~REQPlayCards() {
  SharedDtor();
}

void REQPlayCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void REQPlayCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQPlayCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQPlayCards_descriptor_;
}

const REQPlayCards& REQPlayCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

REQPlayCards* REQPlayCards::default_instance_ = NULL;

REQPlayCards* REQPlayCards::New() const {
  return new REQPlayCards;
}

void REQPlayCards::Clear() {
  card_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQPlayCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 card_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_card_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_card_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQPlayCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 card_id = 1;
  for (int i = 0; i < this->card_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->card_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQPlayCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 card_id = 1;
  for (int i = 0; i < this->card_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->card_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQPlayCards::ByteSize() const {
  int total_size = 0;

  // repeated int32 card_id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card_id(i));
    }
    total_size += 1 * this->card_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQPlayCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQPlayCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQPlayCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQPlayCards::MergeFrom(const REQPlayCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_id_.MergeFrom(from.card_id_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQPlayCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQPlayCards::CopyFrom(const REQPlayCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQPlayCards::IsInitialized() const {

  return true;
}

void REQPlayCards::Swap(REQPlayCards* other) {
  if (other != this) {
    card_id_.Swap(&other->card_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQPlayCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQPlayCards_descriptor_;
  metadata.reflection = REQPlayCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFPlayCards::kUserIdFieldNumber;
const int NTFPlayCards::kCardIdFieldNumber;
#endif  // !_MSC_VER

NTFPlayCards::NTFPlayCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFPlayCards::InitAsDefaultInstance() {
}

NTFPlayCards::NTFPlayCards(const NTFPlayCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFPlayCards::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFPlayCards::~NTFPlayCards() {
  SharedDtor();
}

void NTFPlayCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFPlayCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFPlayCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFPlayCards_descriptor_;
}

const NTFPlayCards& NTFPlayCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFPlayCards* NTFPlayCards::default_instance_ = NULL;

NTFPlayCards* NTFPlayCards::New() const {
  return new NTFPlayCards;
}

void NTFPlayCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
  }
  card_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFPlayCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_id;
        break;
      }

      // repeated int32 card_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_card_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFPlayCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // repeated int32 card_id = 2;
  for (int i = 0; i < this->card_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFPlayCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // repeated int32 card_id = 2;
  for (int i = 0; i < this->card_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->card_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFPlayCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  // repeated int32 card_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card_id(i));
    }
    total_size += 1 * this->card_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFPlayCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFPlayCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFPlayCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFPlayCards::MergeFrom(const NTFPlayCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_id_.MergeFrom(from.card_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFPlayCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFPlayCards::CopyFrom(const NTFPlayCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFPlayCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NTFPlayCards::Swap(NTFPlayCards* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    card_id_.Swap(&other->card_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFPlayCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFPlayCards_descriptor_;
  metadata.reflection = NTFPlayCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFPassCards::kUserIdFieldNumber;
#endif  // !_MSC_VER

NTFPassCards::NTFPassCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFPassCards::InitAsDefaultInstance() {
}

NTFPassCards::NTFPassCards(const NTFPassCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFPassCards::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFPassCards::~NTFPassCards() {
  SharedDtor();
}

void NTFPassCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFPassCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFPassCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFPassCards_descriptor_;
}

const NTFPassCards& NTFPassCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFPassCards* NTFPassCards::default_instance_ = NULL;

NTFPassCards* NTFPassCards::New() const {
  return new NTFPassCards;
}

void NTFPassCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFPassCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFPassCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFPassCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFPassCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFPassCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFPassCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFPassCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFPassCards::MergeFrom(const NTFPassCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFPassCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFPassCards::CopyFrom(const NTFPassCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFPassCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NTFPassCards::Swap(NTFPassCards* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFPassCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFPassCards_descriptor_;
  metadata.reflection = NTFPassCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFResetCards::kCodeIdFieldNumber;
const int NTFResetCards::kCardIdFieldNumber;
const int NTFResetCards::kPlayedIdFieldNumber;
#endif  // !_MSC_VER

NTFResetCards::NTFResetCards()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFResetCards::InitAsDefaultInstance() {
}

NTFResetCards::NTFResetCards(const NTFResetCards& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFResetCards::SharedCtor() {
  _cached_size_ = 0;
  code_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFResetCards::~NTFResetCards() {
  SharedDtor();
}

void NTFResetCards::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFResetCards::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFResetCards::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFResetCards_descriptor_;
}

const NTFResetCards& NTFResetCards::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFResetCards* NTFResetCards::default_instance_ = NULL;

NTFResetCards* NTFResetCards::New() const {
  return new NTFResetCards;
}

void NTFResetCards::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_id_ = 0;
  }
  card_id_.Clear();
  played_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFResetCards::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_id_)));
          set_has_code_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_id;
        break;
      }

      // repeated int32 card_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_card_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_card_id;
        if (input->ExpectTag(24)) goto parse_played_id;
        break;
      }

      // repeated int32 played_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_played_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_played_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_played_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_played_id;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFResetCards::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code_id = 1;
  if (has_code_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code_id(), output);
  }

  // repeated int32 card_id = 2;
  for (int i = 0; i < this->card_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->card_id(i), output);
  }

  // repeated int32 played_id = 3;
  for (int i = 0; i < this->played_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->played_id(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFResetCards::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code_id = 1;
  if (has_code_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code_id(), target);
  }

  // repeated int32 card_id = 2;
  for (int i = 0; i < this->card_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->card_id(i), target);
  }

  // repeated int32 played_id = 3;
  for (int i = 0; i < this->played_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->played_id(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFResetCards::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code_id = 1;
    if (has_code_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code_id());
    }

  }
  // repeated int32 card_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card_id(i));
    }
    total_size += 1 * this->card_id_size() + data_size;
  }

  // repeated int32 played_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->played_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->played_id(i));
    }
    total_size += 1 * this->played_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFResetCards::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFResetCards* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFResetCards*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFResetCards::MergeFrom(const NTFResetCards& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_id_.MergeFrom(from.card_id_);
  played_id_.MergeFrom(from.played_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code_id()) {
      set_code_id(from.code_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFResetCards::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFResetCards::CopyFrom(const NTFResetCards& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFResetCards::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void NTFResetCards::Swap(NTFResetCards* other) {
  if (other != this) {
    std::swap(code_id_, other->code_id_);
    card_id_.Swap(&other->card_id_);
    played_id_.Swap(&other->played_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFResetCards::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFResetCards_descriptor_;
  metadata.reflection = NTFResetCards_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultItem::kUserIdFieldNumber;
const int ResultItem::kResultTypeFieldNumber;
const int ResultItem::kCardIdFieldNumber;
const int ResultItem::kScoreFieldNumber;
const int ResultItem::kTotalscoreFieldNumber;
const int ResultItem::kBaopeiFieldNumber;
const int ResultItem::kLastscoreFieldNumber;
const int ResultItem::kBombscoreFieldNumber;
#endif  // !_MSC_VER

ResultItem::ResultItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultItem::InitAsDefaultInstance() {
}

ResultItem::ResultItem(const ResultItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultItem::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  result_type_ = 0;
  score_ = 0;
  totalscore_ = 0;
  baopei_ = 0;
  lastscore_ = 0;
  bombscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultItem::~ResultItem() {
  SharedDtor();
}

void ResultItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultItem_descriptor_;
}

const ResultItem& ResultItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

ResultItem* ResultItem::default_instance_ = NULL;

ResultItem* ResultItem::New() const {
  return new ResultItem;
}

void ResultItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
    result_type_ = 0;
    score_ = 0;
    totalscore_ = 0;
    baopei_ = 0;
    lastscore_ = 0;
    bombscore_ = 0;
  }
  card_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result_type;
        break;
      }

      // optional int32 result_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_type_)));
          set_has_result_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_id;
        break;
      }

      // repeated int32 card_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_card_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_card_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_card_id;
        if (input->ExpectTag(32)) goto parse_score;
        break;
      }

      // optional int32 score = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totalscore;
        break;
      }

      // optional int32 totalscore = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_baopei;
        break;
      }

      // optional int32 baopei = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baopei:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baopei_)));
          set_has_baopei();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastscore;
        break;
      }

      // optional int32 lastscore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastscore_)));
          set_has_lastscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bombscore;
        break;
      }

      // optional int32 bombscore = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bombscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bombscore_)));
          set_has_bombscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional int32 result_type = 2;
  if (has_result_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->result_type(), output);
  }

  // repeated int32 card_id = 3;
  for (int i = 0; i < this->card_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->card_id(i), output);
  }

  // optional int32 score = 4;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->score(), output);
  }

  // optional int32 totalscore = 5;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalscore(), output);
  }

  // optional int32 baopei = 6;
  if (has_baopei()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->baopei(), output);
  }

  // optional int32 lastscore = 7;
  if (has_lastscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lastscore(), output);
  }

  // optional int32 bombscore = 8;
  if (has_bombscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bombscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // optional int32 result_type = 2;
  if (has_result_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->result_type(), target);
  }

  // repeated int32 card_id = 3;
  for (int i = 0; i < this->card_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->card_id(i), target);
  }

  // optional int32 score = 4;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->score(), target);
  }

  // optional int32 totalscore = 5;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalscore(), target);
  }

  // optional int32 baopei = 6;
  if (has_baopei()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->baopei(), target);
  }

  // optional int32 lastscore = 7;
  if (has_lastscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lastscore(), target);
  }

  // optional int32 bombscore = 8;
  if (has_bombscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bombscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int32 result_type = 2;
    if (has_result_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result_type());
    }

    // optional int32 score = 4;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 totalscore = 5;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }

    // optional int32 baopei = 6;
    if (has_baopei()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baopei());
    }

    // optional int32 lastscore = 7;
    if (has_lastscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastscore());
    }

    // optional int32 bombscore = 8;
    if (has_bombscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bombscore());
    }

  }
  // repeated int32 card_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->card_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->card_id(i));
    }
    total_size += 1 * this->card_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultItem::MergeFrom(const ResultItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  card_id_.MergeFrom(from.card_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_result_type()) {
      set_result_type(from.result_type());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
    if (from.has_baopei()) {
      set_baopei(from.baopei());
    }
    if (from.has_lastscore()) {
      set_lastscore(from.lastscore());
    }
    if (from.has_bombscore()) {
      set_bombscore(from.bombscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultItem::CopyFrom(const ResultItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ResultItem::Swap(ResultItem* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(result_type_, other->result_type_);
    card_id_.Swap(&other->card_id_);
    std::swap(score_, other->score_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(baopei_, other->baopei_);
    std::swap(lastscore_, other->lastscore_);
    std::swap(bombscore_, other->bombscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultItem_descriptor_;
  metadata.reflection = ResultItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFResult::kResultListFieldNumber;
#endif  // !_MSC_VER

NTFResult::NTFResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFResult::InitAsDefaultInstance() {
}

NTFResult::NTFResult(const NTFResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFResult::~NTFResult() {
  SharedDtor();
}

void NTFResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFResult_descriptor_;
}

const NTFResult& NTFResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFResult* NTFResult::default_instance_ = NULL;

NTFResult* NTFResult::New() const {
  return new NTFResult;
}

void NTFResult::Clear() {
  result_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ResultItem result_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_result_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ResultItem result_list = 1;
  for (int i = 0; i < this->result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ResultItem result_list = 1;
  for (int i = 0; i < this->result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFResult::ByteSize() const {
  int total_size = 0;

  // repeated .ResultItem result_list = 1;
  total_size += 1 * this->result_list_size();
  for (int i = 0; i < this->result_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFResult::MergeFrom(const NTFResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_list_.MergeFrom(from.result_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFResult::CopyFrom(const NTFResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFResult::IsInitialized() const {

  for (int i = 0; i < result_list_size(); i++) {
    if (!this->result_list(i).IsInitialized()) return false;
  }
  return true;
}

void NTFResult::Swap(NTFResult* other) {
  if (other != this) {
    result_list_.Swap(&other->result_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFResult_descriptor_;
  metadata.reflection = NTFResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BombResultItem::kUserIdFieldNumber;
const int BombResultItem::kScoreChgFieldNumber;
#endif  // !_MSC_VER

BombResultItem::BombResultItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BombResultItem::InitAsDefaultInstance() {
}

BombResultItem::BombResultItem(const BombResultItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BombResultItem::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  score_chg_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BombResultItem::~BombResultItem() {
  SharedDtor();
}

void BombResultItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BombResultItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BombResultItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BombResultItem_descriptor_;
}

const BombResultItem& BombResultItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

BombResultItem* BombResultItem::default_instance_ = NULL;

BombResultItem* BombResultItem::New() const {
  return new BombResultItem;
}

void BombResultItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
    score_chg_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BombResultItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score_chg;
        break;
      }

      // optional int32 score_chg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score_chg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_chg_)));
          set_has_score_chg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BombResultItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional int32 score_chg = 2;
  if (has_score_chg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score_chg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BombResultItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // optional int32 score_chg = 2;
  if (has_score_chg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score_chg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BombResultItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int32 score_chg = 2;
    if (has_score_chg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score_chg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BombResultItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BombResultItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BombResultItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BombResultItem::MergeFrom(const BombResultItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_score_chg()) {
      set_score_chg(from.score_chg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BombResultItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BombResultItem::CopyFrom(const BombResultItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BombResultItem::IsInitialized() const {

  return true;
}

void BombResultItem::Swap(BombResultItem* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(score_chg_, other->score_chg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BombResultItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BombResultItem_descriptor_;
  metadata.reflection = BombResultItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFBombResult::kResultListFieldNumber;
#endif  // !_MSC_VER

NTFBombResult::NTFBombResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFBombResult::InitAsDefaultInstance() {
}

NTFBombResult::NTFBombResult(const NTFBombResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFBombResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFBombResult::~NTFBombResult() {
  SharedDtor();
}

void NTFBombResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFBombResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFBombResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFBombResult_descriptor_;
}

const NTFBombResult& NTFBombResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFBombResult* NTFBombResult::default_instance_ = NULL;

NTFBombResult* NTFBombResult::New() const {
  return new NTFBombResult;
}

void NTFBombResult::Clear() {
  result_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFBombResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BombResultItem result_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_result_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFBombResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BombResultItem result_list = 1;
  for (int i = 0; i < this->result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFBombResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BombResultItem result_list = 1;
  for (int i = 0; i < this->result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFBombResult::ByteSize() const {
  int total_size = 0;

  // repeated .BombResultItem result_list = 1;
  total_size += 1 * this->result_list_size();
  for (int i = 0; i < this->result_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFBombResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFBombResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFBombResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFBombResult::MergeFrom(const NTFBombResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_list_.MergeFrom(from.result_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFBombResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFBombResult::CopyFrom(const NTFBombResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFBombResult::IsInitialized() const {

  return true;
}

void NTFBombResult::Swap(NTFBombResult* other) {
  if (other != this) {
    result_list_.Swap(&other->result_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFBombResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFBombResult_descriptor_;
  metadata.reflection = NTFBombResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FinalResultItem::kUserIdFieldNumber;
const int FinalResultItem::kSingleMaxScoreFieldNumber;
const int FinalResultItem::kBombcntFieldNumber;
const int FinalResultItem::kWinsFieldNumber;
const int FinalResultItem::kLosesFieldNumber;
const int FinalResultItem::kTotalscoreFieldNumber;
#endif  // !_MSC_VER

FinalResultItem::FinalResultItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FinalResultItem::InitAsDefaultInstance() {
}

FinalResultItem::FinalResultItem(const FinalResultItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FinalResultItem::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  single_max_score_ = 0;
  bombcnt_ = 0;
  wins_ = 0;
  loses_ = 0;
  totalscore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FinalResultItem::~FinalResultItem() {
  SharedDtor();
}

void FinalResultItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FinalResultItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FinalResultItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FinalResultItem_descriptor_;
}

const FinalResultItem& FinalResultItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

FinalResultItem* FinalResultItem::default_instance_ = NULL;

FinalResultItem* FinalResultItem::New() const {
  return new FinalResultItem;
}

void FinalResultItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
    single_max_score_ = 0;
    bombcnt_ = 0;
    wins_ = 0;
    loses_ = 0;
    totalscore_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FinalResultItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_single_max_score;
        break;
      }

      // optional int32 single_max_score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_single_max_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &single_max_score_)));
          set_has_single_max_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bombcnt;
        break;
      }

      // optional int32 bombcnt = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bombcnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bombcnt_)));
          set_has_bombcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wins;
        break;
      }

      // optional int32 wins = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wins:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wins_)));
          set_has_wins();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_loses;
        break;
      }

      // optional int32 loses = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loses:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loses_)));
          set_has_loses();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_totalscore;
        break;
      }

      // optional int32 totalscore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalscore_)));
          set_has_totalscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FinalResultItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // optional int32 single_max_score = 2;
  if (has_single_max_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->single_max_score(), output);
  }

  // optional int32 bombcnt = 3;
  if (has_bombcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bombcnt(), output);
  }

  // optional int32 wins = 4;
  if (has_wins()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wins(), output);
  }

  // optional int32 loses = 5;
  if (has_loses()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->loses(), output);
  }

  // optional int32 totalscore = 6;
  if (has_totalscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalscore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FinalResultItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // optional int32 single_max_score = 2;
  if (has_single_max_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->single_max_score(), target);
  }

  // optional int32 bombcnt = 3;
  if (has_bombcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bombcnt(), target);
  }

  // optional int32 wins = 4;
  if (has_wins()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wins(), target);
  }

  // optional int32 loses = 5;
  if (has_loses()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->loses(), target);
  }

  // optional int32 totalscore = 6;
  if (has_totalscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalscore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FinalResultItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int32 single_max_score = 2;
    if (has_single_max_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->single_max_score());
    }

    // optional int32 bombcnt = 3;
    if (has_bombcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bombcnt());
    }

    // optional int32 wins = 4;
    if (has_wins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wins());
    }

    // optional int32 loses = 5;
    if (has_loses()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loses());
    }

    // optional int32 totalscore = 6;
    if (has_totalscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalscore());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FinalResultItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FinalResultItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FinalResultItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FinalResultItem::MergeFrom(const FinalResultItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_single_max_score()) {
      set_single_max_score(from.single_max_score());
    }
    if (from.has_bombcnt()) {
      set_bombcnt(from.bombcnt());
    }
    if (from.has_wins()) {
      set_wins(from.wins());
    }
    if (from.has_loses()) {
      set_loses(from.loses());
    }
    if (from.has_totalscore()) {
      set_totalscore(from.totalscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FinalResultItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FinalResultItem::CopyFrom(const FinalResultItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FinalResultItem::IsInitialized() const {

  return true;
}

void FinalResultItem::Swap(FinalResultItem* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(single_max_score_, other->single_max_score_);
    std::swap(bombcnt_, other->bombcnt_);
    std::swap(wins_, other->wins_);
    std::swap(loses_, other->loses_);
    std::swap(totalscore_, other->totalscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FinalResultItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FinalResultItem_descriptor_;
  metadata.reflection = FinalResultItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFFinalResult::kResultListFieldNumber;
#endif  // !_MSC_VER

NTFFinalResult::NTFFinalResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFFinalResult::InitAsDefaultInstance() {
}

NTFFinalResult::NTFFinalResult(const NTFFinalResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFFinalResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFFinalResult::~NTFFinalResult() {
  SharedDtor();
}

void NTFFinalResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFFinalResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFFinalResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFFinalResult_descriptor_;
}

const NTFFinalResult& NTFFinalResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFFinalResult* NTFFinalResult::default_instance_ = NULL;

NTFFinalResult* NTFFinalResult::New() const {
  return new NTFFinalResult;
}

void NTFFinalResult::Clear() {
  result_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFFinalResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .FinalResultItem result_list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_result_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_result_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_result_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFFinalResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .FinalResultItem result_list = 1;
  for (int i = 0; i < this->result_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->result_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFFinalResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .FinalResultItem result_list = 1;
  for (int i = 0; i < this->result_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->result_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFFinalResult::ByteSize() const {
  int total_size = 0;

  // repeated .FinalResultItem result_list = 1;
  total_size += 1 * this->result_list_size();
  for (int i = 0; i < this->result_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->result_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFFinalResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFFinalResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFFinalResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFFinalResult::MergeFrom(const NTFFinalResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  result_list_.MergeFrom(from.result_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFFinalResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFFinalResult::CopyFrom(const NTFFinalResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFFinalResult::IsInitialized() const {

  return true;
}

void NTFFinalResult::Swap(NTFFinalResult* other) {
  if (other != this) {
    result_list_.Swap(&other->result_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFFinalResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFFinalResult_descriptor_;
  metadata.reflection = NTFFinalResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFGameSchedule::kCountAllFieldNumber;
const int NTFGameSchedule::kCountIdxFieldNumber;
#endif  // !_MSC_VER

NTFGameSchedule::NTFGameSchedule()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFGameSchedule::InitAsDefaultInstance() {
}

NTFGameSchedule::NTFGameSchedule(const NTFGameSchedule& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFGameSchedule::SharedCtor() {
  _cached_size_ = 0;
  count_all_ = 0;
  count_idx_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFGameSchedule::~NTFGameSchedule() {
  SharedDtor();
}

void NTFGameSchedule::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFGameSchedule::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFGameSchedule::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFGameSchedule_descriptor_;
}

const NTFGameSchedule& NTFGameSchedule::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFGameSchedule* NTFGameSchedule::default_instance_ = NULL;

NTFGameSchedule* NTFGameSchedule::New() const {
  return new NTFGameSchedule;
}

void NTFGameSchedule::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_all_ = 0;
    count_idx_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFGameSchedule::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 count_all = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_all_)));
          set_has_count_all();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count_idx;
        break;
      }

      // optional int32 count_idx = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count_idx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_idx_)));
          set_has_count_idx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFGameSchedule::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 count_all = 1;
  if (has_count_all()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count_all(), output);
  }

  // optional int32 count_idx = 2;
  if (has_count_idx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count_idx(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFGameSchedule::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 count_all = 1;
  if (has_count_all()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count_all(), target);
  }

  // optional int32 count_idx = 2;
  if (has_count_idx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count_idx(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFGameSchedule::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 count_all = 1;
    if (has_count_all()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_all());
    }

    // optional int32 count_idx = 2;
    if (has_count_idx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count_idx());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFGameSchedule::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFGameSchedule* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFGameSchedule*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFGameSchedule::MergeFrom(const NTFGameSchedule& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count_all()) {
      set_count_all(from.count_all());
    }
    if (from.has_count_idx()) {
      set_count_idx(from.count_idx());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFGameSchedule::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFGameSchedule::CopyFrom(const NTFGameSchedule& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFGameSchedule::IsInitialized() const {

  return true;
}

void NTFGameSchedule::Swap(NTFGameSchedule* other) {
  if (other != this) {
    std::swap(count_all_, other->count_all_);
    std::swap(count_idx_, other->count_idx_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFGameSchedule::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFGameSchedule_descriptor_;
  metadata.reflection = NTFGameSchedule_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoardInfoItem::kUserIdFieldNumber;
const int BoardInfoItem::kCurrCardIdFieldNumber;
const int BoardInfoItem::kLeftCardNumFieldNumber;
#endif  // !_MSC_VER

BoardInfoItem::BoardInfoItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BoardInfoItem::InitAsDefaultInstance() {
}

BoardInfoItem::BoardInfoItem(const BoardInfoItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BoardInfoItem::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = GOOGLE_LONGLONG(0);
  left_card_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoardInfoItem::~BoardInfoItem() {
  SharedDtor();
}

void BoardInfoItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BoardInfoItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoardInfoItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoardInfoItem_descriptor_;
}

const BoardInfoItem& BoardInfoItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

BoardInfoItem* BoardInfoItem::default_instance_ = NULL;

BoardInfoItem* BoardInfoItem::New() const {
  return new BoardInfoItem;
}

void BoardInfoItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    user_id_ = GOOGLE_LONGLONG(0);
    left_card_num_ = 0;
  }
  curr_card_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoardInfoItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curr_card_id;
        break;
      }

      // repeated int32 curr_card_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curr_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_curr_card_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_curr_card_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curr_card_id;
        if (input->ExpectTag(24)) goto parse_left_card_num;
        break;
      }

      // optional int32 left_card_num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left_card_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_card_num_)));
          set_has_left_card_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BoardInfoItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->user_id(), output);
  }

  // repeated int32 curr_card_id = 2;
  for (int i = 0; i < this->curr_card_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->curr_card_id(i), output);
  }

  // optional int32 left_card_num = 3;
  if (has_left_card_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left_card_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BoardInfoItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->user_id(), target);
  }

  // repeated int32 curr_card_id = 2;
  for (int i = 0; i < this->curr_card_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->curr_card_id(i), target);
  }

  // optional int32 left_card_num = 3;
  if (has_left_card_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left_card_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BoardInfoItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->user_id());
    }

    // optional int32 left_card_num = 3;
    if (has_left_card_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left_card_num());
    }

  }
  // repeated int32 curr_card_id = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->curr_card_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->curr_card_id(i));
    }
    total_size += 1 * this->curr_card_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoardInfoItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoardInfoItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoardInfoItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoardInfoItem::MergeFrom(const BoardInfoItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  curr_card_id_.MergeFrom(from.curr_card_id_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_left_card_num()) {
      set_left_card_num(from.left_card_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoardInfoItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoardInfoItem::CopyFrom(const BoardInfoItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardInfoItem::IsInitialized() const {

  return true;
}

void BoardInfoItem::Swap(BoardInfoItem* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    curr_card_id_.Swap(&other->curr_card_id_);
    std::swap(left_card_num_, other->left_card_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoardInfoItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoardInfoItem_descriptor_;
  metadata.reflection = BoardInfoItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFBoardInfo::kInfoItemFieldNumber;
const int NTFBoardInfo::kCurrTokenTypeFieldNumber;
const int NTFBoardInfo::kCurrTokenUserIdFieldNumber;
const int NTFBoardInfo::kRemainCardIdFieldNumber;
const int NTFBoardInfo::kFirstUserIdFieldNumber;
#endif  // !_MSC_VER

NTFBoardInfo::NTFBoardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFBoardInfo::InitAsDefaultInstance() {
}

NTFBoardInfo::NTFBoardInfo(const NTFBoardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFBoardInfo::SharedCtor() {
  _cached_size_ = 0;
  curr_token_type_ = 0;
  first_user_id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFBoardInfo::~NTFBoardInfo() {
  SharedDtor();
}

void NTFBoardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFBoardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFBoardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFBoardInfo_descriptor_;
}

const NTFBoardInfo& NTFBoardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFBoardInfo* NTFBoardInfo::default_instance_ = NULL;

NTFBoardInfo* NTFBoardInfo::New() const {
  return new NTFBoardInfo;
}

void NTFBoardInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    curr_token_type_ = 0;
    first_user_id_ = GOOGLE_LONGLONG(0);
  }
  info_item_.Clear();
  curr_token_user_id_.Clear();
  remain_card_id_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFBoardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .BoardInfoItem info_item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info_item;
        if (input->ExpectTag(16)) goto parse_curr_token_type;
        break;
      }

      // optional int32 curr_token_type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curr_token_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curr_token_type_)));
          set_has_curr_token_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curr_token_user_id;
        break;
      }

      // repeated int64 curr_token_user_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curr_token_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_curr_token_user_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_curr_token_user_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curr_token_user_id;
        if (input->ExpectTag(32)) goto parse_remain_card_id;
        break;
      }

      // repeated int32 remain_card_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remain_card_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_remain_card_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remain_card_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_remain_card_id;
        if (input->ExpectTag(40)) goto parse_first_user_id;
        break;
      }

      // optional int64 first_user_id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_first_user_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &first_user_id_)));
          set_has_first_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFBoardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .BoardInfoItem info_item = 1;
  for (int i = 0; i < this->info_item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info_item(i), output);
  }

  // optional int32 curr_token_type = 2;
  if (has_curr_token_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curr_token_type(), output);
  }

  // repeated int64 curr_token_user_id = 3;
  for (int i = 0; i < this->curr_token_user_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->curr_token_user_id(i), output);
  }

  // repeated int32 remain_card_id = 4;
  for (int i = 0; i < this->remain_card_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->remain_card_id(i), output);
  }

  // optional int64 first_user_id = 5;
  if (has_first_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->first_user_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFBoardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .BoardInfoItem info_item = 1;
  for (int i = 0; i < this->info_item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info_item(i), target);
  }

  // optional int32 curr_token_type = 2;
  if (has_curr_token_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curr_token_type(), target);
  }

  // repeated int64 curr_token_user_id = 3;
  for (int i = 0; i < this->curr_token_user_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->curr_token_user_id(i), target);
  }

  // repeated int32 remain_card_id = 4;
  for (int i = 0; i < this->remain_card_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->remain_card_id(i), target);
  }

  // optional int64 first_user_id = 5;
  if (has_first_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->first_user_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFBoardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 curr_token_type = 2;
    if (has_curr_token_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curr_token_type());
    }

    // optional int64 first_user_id = 5;
    if (has_first_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->first_user_id());
    }

  }
  // repeated .BoardInfoItem info_item = 1;
  total_size += 1 * this->info_item_size();
  for (int i = 0; i < this->info_item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info_item(i));
  }

  // repeated int64 curr_token_user_id = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->curr_token_user_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->curr_token_user_id(i));
    }
    total_size += 1 * this->curr_token_user_id_size() + data_size;
  }

  // repeated int32 remain_card_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->remain_card_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->remain_card_id(i));
    }
    total_size += 1 * this->remain_card_id_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFBoardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFBoardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFBoardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFBoardInfo::MergeFrom(const NTFBoardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_item_.MergeFrom(from.info_item_);
  curr_token_user_id_.MergeFrom(from.curr_token_user_id_);
  remain_card_id_.MergeFrom(from.remain_card_id_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_curr_token_type()) {
      set_curr_token_type(from.curr_token_type());
    }
    if (from.has_first_user_id()) {
      set_first_user_id(from.first_user_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFBoardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFBoardInfo::CopyFrom(const NTFBoardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFBoardInfo::IsInitialized() const {

  return true;
}

void NTFBoardInfo::Swap(NTFBoardInfo* other) {
  if (other != this) {
    info_item_.Swap(&other->info_item_);
    std::swap(curr_token_type_, other->curr_token_type_);
    curr_token_user_id_.Swap(&other->curr_token_user_id_);
    remain_card_id_.Swap(&other->remain_card_id_);
    std::swap(first_user_id_, other->first_user_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFBoardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFBoardInfo_descriptor_;
  metadata.reflection = NTFBoardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFPropInfo::kPropidFieldNumber;
const int NTFPropInfo::kChgFieldNumber;
const int NTFPropInfo::kLeftFieldNumber;
#endif  // !_MSC_VER

NTFPropInfo::NTFPropInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFPropInfo::InitAsDefaultInstance() {
}

NTFPropInfo::NTFPropInfo(const NTFPropInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFPropInfo::SharedCtor() {
  _cached_size_ = 0;
  propid_ = 0;
  chg_ = 0;
  left_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFPropInfo::~NTFPropInfo() {
  SharedDtor();
}

void NTFPropInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NTFPropInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFPropInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFPropInfo_descriptor_;
}

const NTFPropInfo& NTFPropInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFPropInfo* NTFPropInfo::default_instance_ = NULL;

NTFPropInfo* NTFPropInfo::New() const {
  return new NTFPropInfo;
}

void NTFPropInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    propid_ = 0;
    chg_ = 0;
    left_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFPropInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 propid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chg;
        break;
      }

      // optional int32 chg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chg_)));
          set_has_chg();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_left;
        break;
      }

      // optional int32 left = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_left:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &left_)));
          set_has_left();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFPropInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 propid = 1;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->propid(), output);
  }

  // optional int32 chg = 2;
  if (has_chg()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chg(), output);
  }

  // optional int32 left = 3;
  if (has_left()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->left(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFPropInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 propid = 1;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->propid(), target);
  }

  // optional int32 chg = 2;
  if (has_chg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chg(), target);
  }

  // optional int32 left = 3;
  if (has_left()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->left(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFPropInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 propid = 1;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propid());
    }

    // optional int32 chg = 2;
    if (has_chg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chg());
    }

    // optional int32 left = 3;
    if (has_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->left());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFPropInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFPropInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFPropInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFPropInfo::MergeFrom(const NTFPropInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_chg()) {
      set_chg(from.chg());
    }
    if (from.has_left()) {
      set_left(from.left());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFPropInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFPropInfo::CopyFrom(const NTFPropInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFPropInfo::IsInitialized() const {

  return true;
}

void NTFPropInfo::Swap(NTFPropInfo* other) {
  if (other != this) {
    std::swap(propid_, other->propid_);
    std::swap(chg_, other->chg_);
    std::swap(left_, other->left_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFPropInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFPropInfo_descriptor_;
  metadata.reflection = NTFPropInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int REQChat::kToUserIdFieldNumber;
const int REQChat::kChatMsgIdFieldNumber;
const int REQChat::kChatMsgFieldNumber;
#endif  // !_MSC_VER

REQChat::REQChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void REQChat::InitAsDefaultInstance() {
}

REQChat::REQChat(const REQChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void REQChat::SharedCtor() {
  _cached_size_ = 0;
  to_user_id_ = GOOGLE_LONGLONG(0);
  chat_msg_id_ = 0;
  chat_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

REQChat::~REQChat() {
  SharedDtor();
}

void REQChat::SharedDtor() {
  if (chat_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_msg_;
  }
  if (this != default_instance_) {
  }
}

void REQChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* REQChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return REQChat_descriptor_;
}

const REQChat& REQChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

REQChat* REQChat::default_instance_ = NULL;

REQChat* REQChat::New() const {
  return new REQChat;
}

void REQChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    to_user_id_ = GOOGLE_LONGLONG(0);
    chat_msg_id_ = 0;
    if (has_chat_msg()) {
      if (chat_msg_ != &::google::protobuf::internal::kEmptyString) {
        chat_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool REQChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 to_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &to_user_id_)));
          set_has_to_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat_msg_id;
        break;
      }

      // optional int32 chat_msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_msg_id_)));
          set_has_chat_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chat_msg;
        break;
      }

      // optional bytes chat_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void REQChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 to_user_id = 1;
  if (has_to_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->to_user_id(), output);
  }

  // optional int32 chat_msg_id = 2;
  if (has_chat_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_msg_id(), output);
  }

  // optional bytes chat_msg = 3;
  if (has_chat_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->chat_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* REQChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 to_user_id = 1;
  if (has_to_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->to_user_id(), target);
  }

  // optional int32 chat_msg_id = 2;
  if (has_chat_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chat_msg_id(), target);
  }

  // optional bytes chat_msg = 3;
  if (has_chat_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->chat_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int REQChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 to_user_id = 1;
    if (has_to_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->to_user_id());
    }

    // optional int32 chat_msg_id = 2;
    if (has_chat_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_msg_id());
    }

    // optional bytes chat_msg = 3;
    if (has_chat_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chat_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void REQChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const REQChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const REQChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void REQChat::MergeFrom(const REQChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_user_id()) {
      set_to_user_id(from.to_user_id());
    }
    if (from.has_chat_msg_id()) {
      set_chat_msg_id(from.chat_msg_id());
    }
    if (from.has_chat_msg()) {
      set_chat_msg(from.chat_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void REQChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void REQChat::CopyFrom(const REQChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool REQChat::IsInitialized() const {

  return true;
}

void REQChat::Swap(REQChat* other) {
  if (other != this) {
    std::swap(to_user_id_, other->to_user_id_);
    std::swap(chat_msg_id_, other->chat_msg_id_);
    std::swap(chat_msg_, other->chat_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata REQChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = REQChat_descriptor_;
  metadata.reflection = REQChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NTFChat::kSendUserIdFieldNumber;
const int NTFChat::kChatMsgIdFieldNumber;
const int NTFChat::kChatMsgFieldNumber;
#endif  // !_MSC_VER

NTFChat::NTFChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NTFChat::InitAsDefaultInstance() {
}

NTFChat::NTFChat(const NTFChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NTFChat::SharedCtor() {
  _cached_size_ = 0;
  send_user_id_ = GOOGLE_LONGLONG(0);
  chat_msg_id_ = 0;
  chat_msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NTFChat::~NTFChat() {
  SharedDtor();
}

void NTFChat::SharedDtor() {
  if (chat_msg_ != &::google::protobuf::internal::kEmptyString) {
    delete chat_msg_;
  }
  if (this != default_instance_) {
  }
}

void NTFChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NTFChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NTFChat_descriptor_;
}

const NTFChat& NTFChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

NTFChat* NTFChat::default_instance_ = NULL;

NTFChat* NTFChat::New() const {
  return new NTFChat;
}

void NTFChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    send_user_id_ = GOOGLE_LONGLONG(0);
    chat_msg_id_ = 0;
    if (has_chat_msg()) {
      if (chat_msg_ != &::google::protobuf::internal::kEmptyString) {
        chat_msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NTFChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 send_user_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &send_user_id_)));
          set_has_send_user_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_chat_msg_id;
        break;
      }

      // optional int32 chat_msg_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_chat_msg_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chat_msg_id_)));
          set_has_chat_msg_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_chat_msg;
        break;
      }

      // optional bytes chat_msg = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_chat_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_chat_msg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NTFChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 send_user_id = 1;
  if (has_send_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->send_user_id(), output);
  }

  // optional int32 chat_msg_id = 2;
  if (has_chat_msg_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->chat_msg_id(), output);
  }

  // optional bytes chat_msg = 3;
  if (has_chat_msg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->chat_msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NTFChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 send_user_id = 1;
  if (has_send_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->send_user_id(), target);
  }

  // optional int32 chat_msg_id = 2;
  if (has_chat_msg_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->chat_msg_id(), target);
  }

  // optional bytes chat_msg = 3;
  if (has_chat_msg()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->chat_msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NTFChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 send_user_id = 1;
    if (has_send_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->send_user_id());
    }

    // optional int32 chat_msg_id = 2;
    if (has_chat_msg_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chat_msg_id());
    }

    // optional bytes chat_msg = 3;
    if (has_chat_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->chat_msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NTFChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NTFChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NTFChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NTFChat::MergeFrom(const NTFChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_send_user_id()) {
      set_send_user_id(from.send_user_id());
    }
    if (from.has_chat_msg_id()) {
      set_chat_msg_id(from.chat_msg_id());
    }
    if (from.has_chat_msg()) {
      set_chat_msg(from.chat_msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NTFChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NTFChat::CopyFrom(const NTFChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NTFChat::IsInitialized() const {

  return true;
}

void NTFChat::Swap(NTFChat* other) {
  if (other != this) {
    std::swap(send_user_id_, other->send_user_id_);
    std::swap(chat_msg_id_, other->chat_msg_id_);
    std::swap(chat_msg_, other->chat_msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NTFChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NTFChat_descriptor_;
  metadata.reflection = NTFChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerData::kPlayerIdFieldNumber;
const int PlayerData::kSeatFieldNumber;
#endif  // !_MSC_VER

PlayerData::PlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerData::InitAsDefaultInstance() {
}

PlayerData::PlayerData(const PlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerData::SharedCtor() {
  _cached_size_ = 0;
  player_id_ = GOOGLE_LONGLONG(0);
  seat_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerData::~PlayerData() {
  SharedDtor();
}

void PlayerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerData_descriptor_;
}

const PlayerData& PlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

PlayerData* PlayerData::default_instance_ = NULL;

PlayerData* PlayerData::New() const {
  return new PlayerData;
}

void PlayerData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    player_id_ = GOOGLE_LONGLONG(0);
    seat_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 player_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &player_id_)));
          set_has_player_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_seat;
        break;
      }

      // optional int32 seat = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_seat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seat_)));
          set_has_seat();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 player_id = 1;
  if (has_player_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->player_id(), output);
  }

  // optional int32 seat = 2;
  if (has_seat()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->seat(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 player_id = 1;
  if (has_player_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->player_id(), target);
  }

  // optional int32 seat = 2;
  if (has_seat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->seat(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 player_id = 1;
    if (has_player_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->player_id());
    }

    // optional int32 seat = 2;
    if (has_seat()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seat());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerData::MergeFrom(const PlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_player_id()) {
      set_player_id(from.player_id());
    }
    if (from.has_seat()) {
      set_seat(from.seat());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerData::CopyFrom(const PlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerData::IsInitialized() const {

  return true;
}

void PlayerData::Swap(PlayerData* other) {
  if (other != this) {
    std::swap(player_id_, other->player_id_);
    std::swap(seat_, other->seat_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerData_descriptor_;
  metadata.reflection = PlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MutiPlayerData::kPlayerDataFieldNumber;
#endif  // !_MSC_VER

MutiPlayerData::MutiPlayerData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MutiPlayerData::InitAsDefaultInstance() {
}

MutiPlayerData::MutiPlayerData(const MutiPlayerData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MutiPlayerData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MutiPlayerData::~MutiPlayerData() {
  SharedDtor();
}

void MutiPlayerData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MutiPlayerData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MutiPlayerData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MutiPlayerData_descriptor_;
}

const MutiPlayerData& MutiPlayerData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

MutiPlayerData* MutiPlayerData::default_instance_ = NULL;

MutiPlayerData* MutiPlayerData::New() const {
  return new MutiPlayerData;
}

void MutiPlayerData::Clear() {
  player_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MutiPlayerData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerData player_data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_player_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_player_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_player_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MutiPlayerData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerData player_data = 1;
  for (int i = 0; i < this->player_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->player_data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MutiPlayerData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerData player_data = 1;
  for (int i = 0; i < this->player_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->player_data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MutiPlayerData::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerData player_data = 1;
  total_size += 1 * this->player_data_size();
  for (int i = 0; i < this->player_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->player_data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MutiPlayerData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MutiPlayerData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MutiPlayerData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MutiPlayerData::MergeFrom(const MutiPlayerData& from) {
  GOOGLE_CHECK_NE(&from, this);
  player_data_.MergeFrom(from.player_data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MutiPlayerData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MutiPlayerData::CopyFrom(const MutiPlayerData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MutiPlayerData::IsInitialized() const {

  return true;
}

void MutiPlayerData::Swap(MutiPlayerData* other) {
  if (other != this) {
    player_data_.Swap(&other->player_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MutiPlayerData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MutiPlayerData_descriptor_;
  metadata.reflection = MutiPlayerData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PdkTypeData::kCardsFieldNumber;
#endif  // !_MSC_VER

PdkTypeData::PdkTypeData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PdkTypeData::InitAsDefaultInstance() {
}

PdkTypeData::PdkTypeData(const PdkTypeData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PdkTypeData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PdkTypeData::~PdkTypeData() {
  SharedDtor();
}

void PdkTypeData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PdkTypeData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PdkTypeData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PdkTypeData_descriptor_;
}

const PdkTypeData& PdkTypeData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_paodekuaiProtocol_2eproto();
  return *default_instance_;
}

PdkTypeData* PdkTypeData::default_instance_ = NULL;

PdkTypeData* PdkTypeData::New() const {
  return new PdkTypeData;
}

void PdkTypeData::Clear() {
  cards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PdkTypeData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 cards = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cards:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_cards())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_cards())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_cards;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PdkTypeData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->cards(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PdkTypeData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 cards = 1;
  for (int i = 0; i < this->cards_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->cards(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PdkTypeData::ByteSize() const {
  int total_size = 0;

  // repeated int32 cards = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->cards_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->cards(i));
    }
    total_size += 1 * this->cards_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PdkTypeData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PdkTypeData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PdkTypeData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PdkTypeData::MergeFrom(const PdkTypeData& from) {
  GOOGLE_CHECK_NE(&from, this);
  cards_.MergeFrom(from.cards_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PdkTypeData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PdkTypeData::CopyFrom(const PdkTypeData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PdkTypeData::IsInitialized() const {

  return true;
}

void PdkTypeData::Swap(PdkTypeData* other) {
  if (other != this) {
    cards_.Swap(&other->cards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PdkTypeData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PdkTypeData_descriptor_;
  metadata.reflection = PdkTypeData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
